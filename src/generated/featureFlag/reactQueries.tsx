// Generated by @compas/code-gen
/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any, unused-imports/no-unused-imports, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface, @typescript-eslint/ban-types */

import type { QueryKey, UseQueryOptions, QueryClient } from "@tanstack/react-query";
import type { AxiosInstance } from "axios";

import {
  UseMutationOptions,
  UseMutationResult,
  UseQueryResult,
  useMutation,
  useQuery,
  useQueryClient,
} from "@tanstack/react-query";

import type { AppErrorResponse } from "generated/common/reactQuery";
import { useApi } from "generated/common/reactQuery";
import type * as T from "generated/common/types";

import { apiFeatureFlagCurrent } from "./apiClient";

/**
 * Get the current available feature flags. This may use the current tenant and user to calculate the values.
 */
export function useFeatureFlagCurrent<TData = T.FeatureFlagCurrentResponseApi>(
  opts?:
    | {
        options?: UseQueryOptions<T.FeatureFlagCurrentResponseApi, AppErrorResponse, TData> | undefined;
      }
    | undefined,
) {
  const axiosInstance = useApi();
  const options = opts?.options ?? {};
  return useQuery(
    useFeatureFlagCurrent.queryKey(),
    ({ signal }) => {
      return apiFeatureFlagCurrent(axiosInstance, { signal });
    },
    options,
  );
}
/**
 * Base key used by useFeatureFlagCurrent.queryKey()
 */
useFeatureFlagCurrent.baseKey = (): QueryKey => ["featureFlag", "current"];
/**
 * Query key used by useFeatureFlagCurrent
 */
useFeatureFlagCurrent.queryKey = (): QueryKey => [...useFeatureFlagCurrent.baseKey()];
/**
 * Fetch useFeatureFlagCurrent via the queryClient and return the result
 */
useFeatureFlagCurrent.fetch = (queryClient: QueryClient, axiosInstance: AxiosInstance) =>
  queryClient.fetchQuery(useFeatureFlagCurrent.queryKey(), () => apiFeatureFlagCurrent(axiosInstance));
/**
 * Prefetch useFeatureFlagCurrent via the queryClient
 */
useFeatureFlagCurrent.prefetch = (queryClient: QueryClient, axiosInstance: AxiosInstance) =>
  queryClient.prefetchQuery(useFeatureFlagCurrent.queryKey(), () => apiFeatureFlagCurrent(axiosInstance));
/**
 * Invalidate useFeatureFlagCurrent via the queryClient
 */
useFeatureFlagCurrent.invalidate = (queryClient: QueryClient, axiosInstance: AxiosInstance) =>
  queryClient.invalidateQueries(useFeatureFlagCurrent.queryKey());
/**
 * Set data for useFeatureFlagCurrent on the queryClient
 */
useFeatureFlagCurrent.setQueryData = (queryClient: QueryClient, data: T.FeatureFlagCurrentResponseApi) =>
  queryClient.setQueryData(useFeatureFlagCurrent.queryKey(), data);
