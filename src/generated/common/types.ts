// Generated by @compas/code-gen
/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any, unused-imports/no-unused-imports, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface, @typescript-eslint/ban-types */

// An export soo all things work correctly with linters, ts, ...
export const __generated__ = true;
export type AuthGetUserParamsInput = { user: string };
export type AuthGetUserResponseApi = { user: AuthUserSummaryApi };
export type AuthUserSummaryApi = {
  id: string;
  name?: undefined | string;
  lastLogin: string;
  anonymousLogin?: undefined | { isAllowedToLogin: boolean; createdAt: string };
  digidLogin?: undefined | { createdAt: string };
  keycloakLogin?: undefined | { email: string; createdAt: string };
  passwordLogin?:
    | undefined
    | {
        email: BackendEmailApi;
        createdAt: string;
        verifiedAt?: undefined | string;
        otpEnabledAt?: undefined | string;
      };
  totpProvider?: undefined | { enabledAt: string };
  roles: { id: string; identifier: string }[];
  permissions: AuthPermissionIdentifierApi[];
  createdAt: string;
  deletedAt?: undefined | string;
};
export type BackendEmailApi = string;
export type AuthPermissionIdentifierApi =
  | "auth:user:list"
  | "auth:user:manage"
  | "auth:permission:manage"
  | "auth:keycloak:user:create"
  | "auth:totp:manage";
export type AuthLogoutResponseApi = { success: true };
export type AuthMeResponseApi = { session: AuthSessionApi; user?: undefined | AuthUserSummaryApi };
export type AuthSessionApi = {
  type: AuthSessionTypeApi;
  loginType: AuthLoginTypeApi;
  twoStepType?: undefined | AuthTwoStepTypeApi;
  userId: string;
};
export type AuthSessionTypeApi = "checkTwoStep" | "user";
export type AuthLoginTypeApi = "anonymousBased" | "digidBased" | "keycloakBased" | "passwordBased";
export type AuthTwoStepTypeApi = "totpProvider" | "passwordBasedOtp";
export type AuthRefreshTokensBodyInput = { refreshToken: string };
export type AuthTokenPairApi = { accessToken: string; refreshToken: string };
export type AuthSetUserActiveParamsInput = AuthGetUserParamsInput;
export type AuthSetUserActiveBodyInput = { active: boolean };
export type AuthSetUserActiveResponseApi = AuthLogoutResponseApi;
export type AuthUpdateUserParamsInput = AuthGetUserParamsInput;
export type AuthUpdateUserBodyInput = { name?: undefined | null | string };
export type AuthUpdateUserResponseApi = AuthLogoutResponseApi;
export type AuthUserListBodyInput = {
  search?: undefined | { name?: undefined | string };
  filters?:
    | undefined
    | {
        anonymousLoginExists?: undefined | boolean;
        digidLoginExists?: undefined | boolean;
        keycloakLoginExists?: undefined | boolean;
        passwordLoginExists?: undefined | boolean;
        includeAnonymousTemporarySessions?: undefined | boolean;
        includeSoftDeletedUsers?: undefined | boolean;
      };
};
export type AuthUserListResponseApi = { users: AuthUserSummaryApi[] };
export type AuthAnonymousBasedLoginBodyInput = { token: string };
export type AuthAnonymousBasedTokenPairApi = AuthTokenPairApi;
export type AuthPasswordBasedForgotPasswordBodyInput = { email: AuthPasswordBasedEmailInput };
export type AuthPasswordBasedEmailInput = BackendEmailApi;
export type AuthPasswordBasedForgotPasswordResponseApi = AuthLogoutResponseApi;
export type AuthPasswordBasedListEmailsResponseApi = {
  emails: {
    email: AuthPasswordBasedEmailApi;
    isVerified: boolean;
    verifiedAt?: undefined | string;
    createdAt: string;
  }[];
};
export type AuthPasswordBasedEmailApi = BackendEmailApi;
export type AuthPasswordBasedLoginBodyInput = {
  email: AuthPasswordBasedEmailInput;
  password: AuthPasswordBasedPasswordInput;
};
export type AuthPasswordBasedPasswordInput = BackendEmailApi;
export type AuthPasswordBasedTokenPairApi = AuthTokenPairApi;
export type AuthPasswordBasedResetPasswordBodyInput = {
  resetToken: string;
  password: AuthPasswordBasedPasswordInput;
};
export type AuthPasswordBasedResetPasswordResponseApi = AuthLogoutResponseApi;
export type AuthPasswordBasedUpdateEmailBodyInput = AuthPasswordBasedForgotPasswordBodyInput;
export type AuthPasswordBasedUpdateEmailResponseApi = AuthLogoutResponseApi;
export type AuthPasswordBasedUpdatePasswordBodyInput = { password: AuthPasswordBasedPasswordInput };
export type AuthPasswordBasedUpdatePasswordResponseApi = AuthLogoutResponseApi;
export type AuthPasswordBasedVerifyEmailBodyInput = { verifyToken: string };
export type AuthPasswordBasedVerifyEmailResponseApi = AuthLogoutResponseApi;
export type AuthPasswordBasedVerifyOtpBodyInput = { otp: string };
export type AuthPasswordBasedVerifyOtpResponseApi = AuthLogoutResponseApi;
export type AuthPermissionCreateRoleBodyInput = { identifier: string };
export type AuthPermissionCreateRoleResponseApi = { role: { id: string; identifier: string } };
export type AuthPermissionPermissionListResponseApi = {
  permissions: { id: string; identifier: AuthPermissionIdentifierApi }[];
};
export type AuthPermissionRemoveRoleParamsInput = { role: string };
export type AuthPermissionRemoveRoleResponseApi = AuthLogoutResponseApi;
export type AuthPermissionRoleAddPermissionsParamsInput = AuthPermissionRemoveRoleParamsInput;
export type AuthPermissionRoleAddPermissionsBodyInput = { permissions: AuthPermissionIdentifierInput[] };
export type AuthPermissionIdentifierInput = AuthPermissionIdentifierApi;
export type AuthPermissionRoleAddPermissionsResponseApi = AuthLogoutResponseApi;
export type AuthPermissionRoleListResponseApi = {
  roles: {
    id: string;
    identifier: string;
    isEditable: boolean;
    permissions: AuthPermissionIdentifierApi[];
  }[];
};
export type AuthPermissionRoleRemovePermissionsParamsInput = AuthPermissionRemoveRoleParamsInput;
export type AuthPermissionRoleRemovePermissionsBodyInput = AuthPermissionRoleAddPermissionsBodyInput;
export type AuthPermissionRoleRemovePermissionsResponseApi = AuthLogoutResponseApi;
export type AuthPermissionSummaryResponseApi = {
  roles: { id: string; identifier: string }[];
  permissions: AuthPermissionIdentifierApi[];
};
export type AuthPermissionUserAssignRoleParamsInput = AuthGetUserParamsInput;
export type AuthPermissionUserAssignRoleBodyInput = AuthPermissionRemoveRoleParamsInput;
export type AuthPermissionUserAssignRoleResponseApi = AuthLogoutResponseApi;
export type AuthPermissionUserRemoveRoleParamsInput = AuthGetUserParamsInput;
export type AuthPermissionUserRemoveRoleBodyInput = AuthPermissionRemoveRoleParamsInput;
export type AuthPermissionUserRemoveRoleResponseApi = AuthLogoutResponseApi;
export type AuthPermissionUserSummaryParamsInput = AuthGetUserParamsInput;
export type AuthPermissionUserSummaryResponseApi = AuthPermissionSummaryResponseApi;
export type AuthTotpProviderInfoResponseApi = { isConfigured: boolean; isVerified: boolean };
export type AuthTotpProviderRemoveResponseApi = AuthLogoutResponseApi;
export type AuthTotpProviderRemoveForUserParamsInput = AuthGetUserParamsInput;
export type AuthTotpProviderRemoveForUserResponseApi = AuthLogoutResponseApi;
export type AuthTotpProviderSetupBodyInput = {};
export type AuthTotpProviderSetupResponseApi = { otpAuthUrl: string; secret: string; algorithm: "sha512" };
export type AuthTotpProviderSetupVerifyBodyInput = { totp: string };
export type AuthTotpProviderSetupVerifyResponseApi = AuthLogoutResponseApi;
export type AuthTotpProviderVerifyBodyInput = AuthTotpProviderSetupVerifyBodyInput;
export type AuthTotpProviderVerifyResponseApi = AuthLogoutResponseApi;
export type CompasStructureResponseApi = any;
export type FeatureFlagCurrentResponseApi = { __FEATURE_EXAMPLE_FLAG: boolean };
export type MultitenantCurrentResponseApi = {
  tenant: { id: string; name: string; data: BackendTenantDataApi };
};
export type BackendTenantDataApi = CompasStructureResponseApi;
export type ScaffoldCreateUserResponseApi = { loginToken: string };
