// Generated by @compas/code-gen

export type AuthGetUserParams = {
  user: string;
};

/**
 * Relatively free-form email type. Accepting most valid emails. Emails are case-insensitive.
 */
export type BackendEmail = string;

export type AuthPermissionIdentifier =
  | "auth:user:list"
  | "auth:user:manage"
  | "auth:permission:manage"
  | "auth:keycloak:user:create"
  | "auth:totp:manage"
  | "lightbase:internal";

export type AuthUserSummary = {
  id: string;
  name?: string | undefined;
  lastLogin: string;
  anonymousLogin?:
    | {
        isAllowedToLogin: boolean;
        createdAt: string;
      }
    | undefined;
  digidLogin?:
    | {
        createdAt: string;
      }
    | undefined;
  keycloakLogin?:
    | {
        email: string;
        createdAt: string;
      }
    | undefined;
  passwordLogin?:
    | {
        email: BackendEmail;
        createdAt: string;
        verifiedAt?: string | undefined;
        otpEnabledAt?: string | undefined;
      }
    | undefined;
  totpProvider?:
    | {
        enabledAt: string;
      }
    | undefined;
  roles: {
    id: string;
    identifier: string;
  }[];
  permissions: AuthPermissionIdentifier[];
  createdAt: string;
  deletedAt?: string | undefined;
};

export type AuthGetUserResponse = {
  user: AuthUserSummary;
};

export type AuthLogoutResponse = {
  success: true;
};

export type AuthSessionType = "checkTwoStep" | "user" | "passwordBasedUpdatePassword";

export type AuthLoginType = "anonymousBased" | "digidBased" | "keycloakBased" | "passwordBased";

export type AuthTwoStepType = "totpProvider" | "passwordBasedOtp";

export type AuthSession = {
  type: AuthSessionType;
  loginType: AuthLoginType;
  twoStepType?: AuthTwoStepType | undefined;
  userId: string;
};

export type AuthMeResponse = {
  session: AuthSession;
  user?: AuthUserSummary | undefined;
};

export type AuthRefreshTokensBody = {
  refreshToken: string;
};

export type AuthTokenPair = {
  accessToken: string;
  refreshToken: string;
};

export type AuthSetUserActiveParams = {
  user: string;
};

export type AuthSetUserActiveBody = {
  active: boolean | "true" | "false";
};

export type AuthSetUserActiveResponse = {
  success: true;
};

export type AuthUpdateUserParams = {
  user: string;
};

export type AuthUpdateUserBody = {
  name?: string | undefined | null;
};

export type AuthUpdateUserResponse = {
  success: true;
};

export type AuthUserListBody = {
  search?:
    | {
        name?: string | undefined;
      }
    | undefined;
  filters?:
    | {
        anonymousLoginExists?: boolean | "true" | "false" | undefined;
        digidLoginExists?: boolean | "true" | "false" | undefined;
        keycloakLoginExists?: boolean | "true" | "false" | undefined;
        passwordLoginExists?: boolean | "true" | "false" | undefined;
        includeAnonymousTemporarySessions?: boolean | "true" | "false" | undefined;
        includeSoftDeletedUsers?: boolean | "true" | "false" | undefined;
      }
    | undefined;
};

export type AuthUserListResponse = {
  users: AuthUserSummary[];
};

export type SessionLoginDevice = {
  platform: "apple" | "android" | "desktop" | "other";
  name: string;
  notificationToken?: string | undefined;
};

export type AuthAnonymousBasedLoginBody = {
  token: string;
  device?: SessionLoginDevice | undefined;
};

export type AuthAnonymousBasedTokenPair = {
  accessToken: string;
  refreshToken: string;
};

/**
 * Relatively free-form email type. Accepting most valid emails. Emails are case-insensitive.
 */
export type AuthPasswordBasedEmail = string;

export type AuthPasswordBasedForgotPasswordBody = {
  email: AuthPasswordBasedEmail;
};

export type AuthPasswordBasedForgotPasswordResponse = {
  success: true;
};

export type AuthPasswordBasedListEmailsResponse = {
  emails: {
    email: AuthPasswordBasedEmail;
    isVerified: boolean;
    verifiedAt?: string | undefined;
    createdAt: string;
  }[];
};

/**
 * Free form password types. Setting a reasonable limit to 512 characters, allowing password sentences and generated passwords.
 */
export type AuthPasswordBasedPassword = string;

export type AuthPasswordBasedLoginBody = {
  email: AuthPasswordBasedEmail;
  password: AuthPasswordBasedPassword;
  device?: SessionLoginDevice | undefined;
};

export type AuthPasswordBasedTokenPair = {
  accessToken: string;
  refreshToken: string;
};

export type AuthPasswordBasedResetPasswordBody = {
  resetToken: string;
  password: AuthPasswordBasedPassword;
};

export type AuthPasswordBasedResetPasswordResponse = {
  success: true;
};

export type AuthPasswordBasedUpdateEmailBody = {
  email: AuthPasswordBasedEmail;
};

export type AuthPasswordBasedUpdateEmailResponse = {
  success: true;
};

export type AuthPasswordBasedUpdatePasswordBody = {
  password: AuthPasswordBasedPassword;
};

export type AuthPasswordBasedUpdatePasswordResponse = {
  success: true;
};

export type AuthPasswordBasedVerifyEmailBody = {
  verifyToken: string;
  device?: SessionLoginDevice | undefined;
};

export type AuthPasswordBasedVerifyOtpBody = {
  otp: string;
};

export type AuthPasswordBasedVerifyOtpResponse = {
  success: true;
};

export type AuthPermissionCreateRoleBody = {
  identifier: string;
};

export type AuthPermissionCreateRoleResponse = {
  role: {
    id: string;
    identifier: string;
  };
};

export type AuthPermissionPermissionListResponse = {
  permissions: {
    id: string;
    identifier: AuthPermissionIdentifier;
  }[];
};

export type AuthPermissionRemoveRoleParams = {
  role: string;
};

export type AuthPermissionRemoveRoleResponse = {
  success: true;
};

export type AuthPermissionRoleAddPermissionsParams = {
  role: string;
};

export type AuthPermissionRoleAddPermissionsBody = {
  permissions: AuthPermissionIdentifier[];
};

export type AuthPermissionRoleAddPermissionsResponse = {
  success: true;
};

export type AuthPermissionRoleListResponse = {
  roles: {
    id: string;
    identifier: string;
    isEditable: boolean;
    permissions: AuthPermissionIdentifier[];
  }[];
};

export type AuthPermissionRoleRemovePermissionsParams = {
  role: string;
};

export type AuthPermissionRoleRemovePermissionsBody = {
  permissions: AuthPermissionIdentifier[];
};

export type AuthPermissionRoleRemovePermissionsResponse = {
  success: true;
};

export type AuthPermissionSummaryResponse = {
  roles: {
    id: string;
    identifier: string;
  }[];
  permissions: AuthPermissionIdentifier[];
};

export type AuthPermissionUserAssignRoleParams = {
  user: string;
};

export type AuthPermissionUserAssignRoleBody = {
  role: string;
};

export type AuthPermissionUserAssignRoleResponse = {
  success: true;
};

export type AuthPermissionUserRemoveRoleParams = {
  user: string;
};

export type AuthPermissionUserRemoveRoleBody = {
  role: string;
};

export type AuthPermissionUserRemoveRoleResponse = {
  success: true;
};

export type AuthPermissionUserSummaryParams = {
  user: string;
};

export type AuthPermissionUserSummaryResponse = {
  roles: {
    id: string;
    identifier: string;
  }[];
  permissions: AuthPermissionIdentifier[];
};

export type AuthTotpProviderInfoResponse = {
  isConfigured: boolean;
  isVerified: boolean;
};

export type AuthTotpProviderRemoveResponse = {
  success: true;
};

export type AuthTotpProviderRemoveForUserParams = {
  user: string;
};

export type AuthTotpProviderRemoveForUserResponse = {
  success: true;
};

export type AuthTotpProviderSetupBody = {};

export type AuthTotpProviderSetupResponse = {
  otpAuthUrl: string;
  secret: string;
  algorithm: "sha512";
};

export type AuthTotpProviderSetupVerifyBody = {
  totp: string;
};

export type AuthTotpProviderSetupVerifyResponse = {
  success: true;
};

export type AuthTotpProviderVerifyBody = {
  totp: string;
};

export type AuthTotpProviderVerifyResponse = {
  success: true;
};

export type FeatureFlagCurrentResponse = {
  __FEATURE_LPC_EXAMPLE_FLAG: boolean;
};

export type ManagementRequestMagicLinkBody = {
  slackUserId: string;
};

export type ManagementRequestMagicLinkResponse = {
  magicLink?: string | undefined;
};

export type ManagementFeatureFlagListQuery = {
  offset?: number | undefined;
  limit?: number | undefined;
};

export type ManagementFeatureFlagListBody = {
  where?:
    | {
        id?: string | undefined;
        idNotEqual?: string | undefined;
        idIn?: string[] | undefined;
        idNotIn?: string[] | undefined;
        name?: string | undefined;
        nameNotEqual?: string | undefined;
        nameIn?: string[] | undefined;
        nameNotIn?: string[] | undefined;
        nameLike?: string | undefined;
        nameILike?: string | undefined;
        nameNotLike?: string | undefined;
        createdAt?: Date | string | number | undefined;
        createdAtNotEqual?: Date | string | number | undefined;
        createdAtIn?: (Date | string | number)[] | undefined;
        createdAtNotIn?: (Date | string | number)[] | undefined;
        createdAtGreaterThan?: Date | string | number | undefined;
        createdAtLowerThan?: Date | string | number | undefined;
        updatedAt?: Date | string | number | undefined;
        updatedAtNotEqual?: Date | string | number | undefined;
        updatedAtIn?: (Date | string | number)[] | undefined;
        updatedAtNotIn?: (Date | string | number)[] | undefined;
        updatedAtGreaterThan?: Date | string | number | undefined;
        updatedAtLowerThan?: Date | string | number | undefined;
      }
    | undefined;
  orderBy?: ("id" | "name" | "createdAt" | "updatedAt")[] | undefined;
  orderBySpec?:
    | {
        id?: "ASC" | "DESC" | undefined;
        name?: "ASC" | "DESC" | undefined;
        createdAt?: "ASC" | "DESC" | undefined;
        updatedAt?: "ASC" | "DESC" | undefined;
      }
    | undefined;
};

export type ManagementFeatureFlagItem = {
  /**
   * The primary key of the 'featureFlag' model.
   */
  id: string;
  globalValue: boolean;
  description: string;
  name: string;

  /**
   * Automatically generated 'createdAt', containing an ISO timestamp.
   */
  createdAt: string;

  /**
   * Automatically generated 'updatedAt', containing an ISO timestamp.
   */
  updatedAt: string;
};

export type ManagementFeatureFlagListResponse = {
  list: ManagementFeatureFlagItem[];
  total: number;
};

export type ManagementFeatureFlagSingleParams = {
  /**
   * The primary key of the 'featureFlag' model.
   */
  featureFlagId: string;
};

export type ManagementFeatureFlagSingleResponse = {
  item: ManagementFeatureFlagItem;
};

export type ManagementFeatureFlagUpdateParams = {
  /**
   * The primary key of the 'featureFlag' model.
   */
  featureFlagId: string;
};

export type ManagementFeatureFlagItemWrite = {
  globalValue?: boolean | "true" | "false" | undefined;
  description?: string | undefined;
};

export type ManagementFeatureFlagUpdateResponse = {
  success: true;
};

export type BackendTenantData = any;

export type MultitenantCurrentResponse = {
  tenant: {
    id: string;
    name: string;
    data: BackendTenantData;
  };
};

export type ScaffoldCreateUserResponse = {
  loginToken: string;
};

export type SessionItem = {
  sessionId: string;
  isCurrentSession: boolean;
  device?: SessionLoginDevice | undefined;
};

export type SessionListResponse = {
  sessions: SessionItem[];
};

export type SessionLogoutBody = {
  sessionId: string;
};

export type SessionLogoutResponse = {};

export type SessionSetDeviceNotificationTokenBody = {
  notificationToken: string;
};

export type SessionSetDeviceNotificationTokenResponse = {};
