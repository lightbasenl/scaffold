// Generated by @compas/code-gen

import type {
  QueryClient,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
} from "@tanstack/react-query";
import type { AxiosInstance, AxiosRequestConfig } from "axios";

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

import type { AppErrorResponse } from "generated/common/api-client";
import type { Pretty } from "generated/common/api-client-wrapper";
import { useApi } from "generated/common/api-client-wrapper";
import type {
  AuthPermissionCreateRoleBody,
  AuthPermissionCreateRoleResponse,
  AuthPermissionPermissionListResponse,
  AuthPermissionRemoveRoleParams,
  AuthPermissionRemoveRoleResponse,
  AuthPermissionRoleAddPermissionsBody,
  AuthPermissionRoleAddPermissionsParams,
  AuthPermissionRoleAddPermissionsResponse,
  AuthPermissionRoleListResponse,
  AuthPermissionRoleRemovePermissionsBody,
  AuthPermissionRoleRemovePermissionsParams,
  AuthPermissionRoleRemovePermissionsResponse,
  AuthPermissionSummaryResponse,
  AuthPermissionUserAssignRoleBody,
  AuthPermissionUserAssignRoleParams,
  AuthPermissionUserAssignRoleResponse,
  AuthPermissionUserRemoveRoleBody,
  AuthPermissionUserRemoveRoleParams,
  AuthPermissionUserRemoveRoleResponse,
  AuthPermissionUserSummaryParams,
  AuthPermissionUserSummaryResponse,
} from "generated/common/types";

import {
  apiAuthPermissionCreateRole,
  apiAuthPermissionPermissionList,
  apiAuthPermissionRemoveRole,
  apiAuthPermissionRoleAddPermissions,
  apiAuthPermissionRoleList,
  apiAuthPermissionRoleRemovePermissions,
  apiAuthPermissionSummary,
  apiAuthPermissionUserAssignRole,
  apiAuthPermissionUserRemoveRole,
  apiAuthPermissionUserSummary,
} from "./apiClient";
/**
 * Create a new role. This role is 'tenant' specific.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
type UseAuthPermissionCreateRoleProps = Pretty<
  AuthPermissionCreateRoleBody & { requestConfig?: AxiosRequestConfig }
>;
export function useAuthPermissionCreateRole(
  options: UseMutationOptions<
    AuthPermissionCreateRoleResponse,
    AppErrorResponse,
    UseAuthPermissionCreateRoleProps
  > = {},
): UseMutationResult<
  AuthPermissionCreateRoleResponse,
  AppErrorResponse,
  UseAuthPermissionCreateRoleProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthPermissionCreateRole(
        axiosInstance,
        { identifier: variables["identifier"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Get the current known backend permissions. Can be used in the Frontend to match
 * known permissions and disable selection of unknowns.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export function useAuthPermissionPermissionList<TData = AuthPermissionPermissionListResponse>(
  opts: Pretty<
    { requestConfig?: AxiosRequestConfig } & {
      queryOptions?: UseQueryOptions<AuthPermissionPermissionListResponse, AppErrorResponse, TData>;
    }
  > = {},
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useAuthPermissionPermissionList.queryKey(),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthPermissionPermissionList(axiosInstance, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useAuthPermissionPermissionList.queryKey()
 */
useAuthPermissionPermissionList.baseKey = (): QueryKey => ["authPermission", "permissionList"];

/**
 * Query key used by useAuthPermissionPermissionList
 */
useAuthPermissionPermissionList.queryKey = (): QueryKey => [...useAuthPermissionPermissionList.baseKey()];

/**
 * Fetch useAuthPermissionPermissionList via the queryClient and return the result
 */
useAuthPermissionPermissionList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.fetchQuery(useAuthPermissionPermissionList.queryKey(), () => {
    return apiAuthPermissionPermissionList(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Prefetch useAuthPermissionPermissionList via the queryClient
 */
useAuthPermissionPermissionList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.prefetchQuery(useAuthPermissionPermissionList.queryKey(), () => {
    return apiAuthPermissionPermissionList(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Invalidate useAuthPermissionPermissionList via the queryClient
 */
useAuthPermissionPermissionList.invalidate = (queryClient: QueryClient) =>
  queryClient.invalidateQueries(useAuthPermissionPermissionList.queryKey());

/**
 * Set query data for useAuthPermissionPermissionList via the queryClient
 */
useAuthPermissionPermissionList.setQueryData = (
  queryClient: QueryClient,

  data: AuthPermissionPermissionListResponse,
) => {
  return queryClient.setQueryData(useAuthPermissionPermissionList.queryKey(), data);
};

/**
 * Remove a role. Only tenant specific roles can be removed.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
type UseAuthPermissionRemoveRoleProps = Pretty<
  AuthPermissionRemoveRoleParams & { requestConfig?: AxiosRequestConfig }
>;
export function useAuthPermissionRemoveRole(
  options: UseMutationOptions<
    AuthPermissionRemoveRoleResponse,
    AppErrorResponse,
    UseAuthPermissionRemoveRoleProps
  > = {},
): UseMutationResult<
  AuthPermissionRemoveRoleResponse,
  AppErrorResponse,
  UseAuthPermissionRemoveRoleProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthPermissionRemoveRole(axiosInstance, { role: variables["role"] }, variables?.requestConfig),
    options,
  );
}

/**
 * Add permissions to a role. Requires that both permissions and role exist.
 * The implementation checks if a permission is already added to the role, so
 * providing existing permissions is not a problem
 *
 * Errors:
 * - `authPermission.requireRole.unknownRole` -> the provided `role` identifier is
 *   unknown.
 * - `authPermission.roleAddPermissions.unknownPermission` -> Empty permission
 *   array, duplicate permission in the array or an unknown permission provided.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
type UseAuthPermissionRoleAddPermissionsProps = Pretty<
  AuthPermissionRoleAddPermissionsParams &
    AuthPermissionRoleAddPermissionsBody & { requestConfig?: AxiosRequestConfig }
>;
export function useAuthPermissionRoleAddPermissions(
  options: UseMutationOptions<
    AuthPermissionRoleAddPermissionsResponse,
    AppErrorResponse,
    UseAuthPermissionRoleAddPermissionsProps
  > = {},
): UseMutationResult<
  AuthPermissionRoleAddPermissionsResponse,
  AppErrorResponse,
  UseAuthPermissionRoleAddPermissionsProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthPermissionRoleAddPermissions(
        axiosInstance,
        { role: variables["role"] },
        { permissions: variables["permissions"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Get the roles with permissions across the system.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export function useAuthPermissionRoleList<TData = AuthPermissionRoleListResponse>(
  opts: Pretty<
    { requestConfig?: AxiosRequestConfig } & {
      queryOptions?: UseQueryOptions<AuthPermissionRoleListResponse, AppErrorResponse, TData>;
    }
  > = {},
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useAuthPermissionRoleList.queryKey(),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthPermissionRoleList(axiosInstance, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useAuthPermissionRoleList.queryKey()
 */
useAuthPermissionRoleList.baseKey = (): QueryKey => ["authPermission", "roleList"];

/**
 * Query key used by useAuthPermissionRoleList
 */
useAuthPermissionRoleList.queryKey = (): QueryKey => [...useAuthPermissionRoleList.baseKey()];

/**
 * Fetch useAuthPermissionRoleList via the queryClient and return the result
 */
useAuthPermissionRoleList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.fetchQuery(useAuthPermissionRoleList.queryKey(), () => {
    return apiAuthPermissionRoleList(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Prefetch useAuthPermissionRoleList via the queryClient
 */
useAuthPermissionRoleList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.prefetchQuery(useAuthPermissionRoleList.queryKey(), () => {
    return apiAuthPermissionRoleList(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Invalidate useAuthPermissionRoleList via the queryClient
 */
useAuthPermissionRoleList.invalidate = (queryClient: QueryClient) =>
  queryClient.invalidateQueries(useAuthPermissionRoleList.queryKey());

/**
 * Set query data for useAuthPermissionRoleList via the queryClient
 */
useAuthPermissionRoleList.setQueryData = (
  queryClient: QueryClient,

  data: AuthPermissionRoleListResponse,
) => {
  return queryClient.setQueryData(useAuthPermissionRoleList.queryKey(), data);
};

/**
 * Remove permissions from a role. Requires that the role exists and all provided
 * permissions are assigned.
 *
 * Errors:
 * - `authPermission.requireRole.unknownRole` -> the provided `role` identifier is
 *   unknown.
 * - `authPermission.roleRemovePermissions.permissionNotAssigned` -> The provided
 *   permission is not assigned to the provided role.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
type UseAuthPermissionRoleRemovePermissionsProps = Pretty<
  AuthPermissionRoleRemovePermissionsParams &
    AuthPermissionRoleRemovePermissionsBody & { requestConfig?: AxiosRequestConfig }
>;
export function useAuthPermissionRoleRemovePermissions(
  options: UseMutationOptions<
    AuthPermissionRoleRemovePermissionsResponse,
    AppErrorResponse,
    UseAuthPermissionRoleRemovePermissionsProps
  > = {},
): UseMutationResult<
  AuthPermissionRoleRemovePermissionsResponse,
  AppErrorResponse,
  UseAuthPermissionRoleRemovePermissionsProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthPermissionRoleRemovePermissions(
        axiosInstance,
        { role: variables["role"] },
        { permissions: variables["permissions"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Get the roles and permissions for the current logged-in user.
 *
 */
export function useAuthPermissionSummary<TData = AuthPermissionSummaryResponse>(
  opts: Pretty<
    { requestConfig?: AxiosRequestConfig } & {
      queryOptions?: UseQueryOptions<AuthPermissionSummaryResponse, AppErrorResponse, TData>;
    }
  > = {},
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useAuthPermissionSummary.queryKey(),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthPermissionSummary(axiosInstance, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useAuthPermissionSummary.queryKey()
 */
useAuthPermissionSummary.baseKey = (): QueryKey => ["authPermission", "summary"];

/**
 * Query key used by useAuthPermissionSummary
 */
useAuthPermissionSummary.queryKey = (): QueryKey => [...useAuthPermissionSummary.baseKey()];

/**
 * Fetch useAuthPermissionSummary via the queryClient and return the result
 */
useAuthPermissionSummary.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.fetchQuery(useAuthPermissionSummary.queryKey(), () => {
    return apiAuthPermissionSummary(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Prefetch useAuthPermissionSummary via the queryClient
 */
useAuthPermissionSummary.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.prefetchQuery(useAuthPermissionSummary.queryKey(), () => {
    return apiAuthPermissionSummary(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Invalidate useAuthPermissionSummary via the queryClient
 */
useAuthPermissionSummary.invalidate = (queryClient: QueryClient) =>
  queryClient.invalidateQueries(useAuthPermissionSummary.queryKey());

/**
 * Set query data for useAuthPermissionSummary via the queryClient
 */
useAuthPermissionSummary.setQueryData = (
  queryClient: QueryClient,

  data: AuthPermissionSummaryResponse,
) => {
  return queryClient.setQueryData(useAuthPermissionSummary.queryKey(), data);
};

/**
 * Assign the provided role to the provided user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `authPermission.requireUser`
 *   eventKey.
 * - `authPermission.userAssignRole.userHasRole` -> user already has the provided
 *   role assigned to them
 * - `authPermission.userAssignRole.unknownRole` -> Role can not be found by the
 *   provided identifier.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
type UseAuthPermissionUserAssignRoleProps = Pretty<
  AuthPermissionUserAssignRoleParams &
    AuthPermissionUserAssignRoleBody & { requestConfig?: AxiosRequestConfig }
>;
export function useAuthPermissionUserAssignRole(
  options: UseMutationOptions<
    AuthPermissionUserAssignRoleResponse,
    AppErrorResponse,
    UseAuthPermissionUserAssignRoleProps
  > = {},
): UseMutationResult<
  AuthPermissionUserAssignRoleResponse,
  AppErrorResponse,
  UseAuthPermissionUserAssignRoleProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthPermissionUserAssignRole(
        axiosInstance,
        { user: variables["user"] },
        { role: variables["role"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Remove the provided role from the provided user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `authPermission.requireUser`
 *   eventKey.
 * - `authPermission.userRemoveRole.roleNotAssigned` -> role is not assigned to the
 *   user at the time of calling.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
type UseAuthPermissionUserRemoveRoleProps = Pretty<
  AuthPermissionUserRemoveRoleParams &
    AuthPermissionUserRemoveRoleBody & { requestConfig?: AxiosRequestConfig }
>;
export function useAuthPermissionUserRemoveRole(
  options: UseMutationOptions<
    AuthPermissionUserRemoveRoleResponse,
    AppErrorResponse,
    UseAuthPermissionUserRemoveRoleProps
  > = {},
): UseMutationResult<
  AuthPermissionUserRemoveRoleResponse,
  AppErrorResponse,
  UseAuthPermissionUserRemoveRoleProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthPermissionUserRemoveRole(
        axiosInstance,
        { user: variables["user"] },
        { role: variables["role"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Get the `apiAuthPermissionSummary` for the provided user.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export function useAuthPermissionUserSummary<TData = AuthPermissionUserSummaryResponse>(
  opts: Pretty<
    Partial<
      AuthPermissionUserSummaryParams & { requestConfig?: AxiosRequestConfig } & {
        queryOptions?: UseQueryOptions<AuthPermissionUserSummaryResponse, AppErrorResponse, TData>;
      }
    >
  >,
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  options.enabled =
    options.enabled === true ||
    (options.enabled !== false && opts["user"] !== undefined && opts["user"] !== null);
  return useQuery(
    useAuthPermissionUserSummary.queryKey(opts),
    ({ signal }) => {
      if (opts["user"] === undefined || opts["user"] === null) {
        throw new Error(
          "Not all required variables where provided. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
        );
      }

      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthPermissionUserSummary(axiosInstance, { user: opts["user"] }, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useAuthPermissionUserSummary.queryKey()
 */
useAuthPermissionUserSummary.baseKey = (): QueryKey => ["authPermission", "userSummary"];

/**
 * Query key used by useAuthPermissionUserSummary
 */
useAuthPermissionUserSummary.queryKey = (
  opts: Pretty<Partial<AuthPermissionUserSummaryParams>>,
): QueryKey => [...useAuthPermissionUserSummary.baseKey(), { user: opts["user"] }];

/**
 * Fetch useAuthPermissionUserSummary via the queryClient and return the result
 */
useAuthPermissionUserSummary.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: Pretty<Partial<AuthPermissionUserSummaryParams & { requestConfig?: AxiosRequestConfig }>>,
) => {
  return queryClient.fetchQuery(useAuthPermissionUserSummary.queryKey(opts), () => {
    if (opts["user"] === undefined || opts["user"] === null) {
      throw new Error(
        "Not all required variables where provided. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
      );
    }

    return apiAuthPermissionUserSummary(axiosInstance, { user: opts["user"] }, opts?.requestConfig);
  });
};

/**
 * Prefetch useAuthPermissionUserSummary via the queryClient
 */
useAuthPermissionUserSummary.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: Pretty<Partial<AuthPermissionUserSummaryParams & { requestConfig?: AxiosRequestConfig }>>,
) => {
  return queryClient.prefetchQuery(useAuthPermissionUserSummary.queryKey(opts), () => {
    if (opts["user"] === undefined || opts["user"] === null) {
      throw new Error(
        "Not all required variables where provided. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
      );
    }

    return apiAuthPermissionUserSummary(axiosInstance, { user: opts["user"] }, opts?.requestConfig);
  });
};

/**
 * Invalidate useAuthPermissionUserSummary via the queryClient
 */
useAuthPermissionUserSummary.invalidate = (
  queryClient: QueryClient,
  opts: Pretty<Partial<AuthPermissionUserSummaryParams>>,
) => queryClient.invalidateQueries(useAuthPermissionUserSummary.queryKey(opts));

/**
 * Set query data for useAuthPermissionUserSummary via the queryClient
 */
useAuthPermissionUserSummary.setQueryData = (
  queryClient: QueryClient,
  opts: Pretty<Partial<AuthPermissionUserSummaryParams>>,
  data: AuthPermissionUserSummaryResponse,
) => {
  if (opts["user"] === undefined || opts["user"] === null) {
    throw new Error(
      "Not all required variables where provided. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
    );
  }

  return queryClient.setQueryData(useAuthPermissionUserSummary.queryKey(opts), data);
};
