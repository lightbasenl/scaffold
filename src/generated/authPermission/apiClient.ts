// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import * as T from "../common/types";
import { AxiosInstance } from "axios";



/**
 * Create a new role. This role is 'tenant' specific.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionCreateRole(
instance: AxiosInstance,
body: T.AuthPermissionCreateRoleBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionCreateRoleResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/permission/role`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Get the current known backend permissions. Can be used in the Frontend to match
 * known permissions and disable selection of unknowns.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionPermissionList(
instance: AxiosInstance,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionPermissionListResponseApi> {
const response = await instance.request({
url: `auth/permission/permission/list`,
method: "get",
...requestConfig,
});
return response.data;
}



/**
 * Remove a role. Only tenant specific roles can be removed.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionRemoveRole(
instance: AxiosInstance,
params: T.AuthPermissionRemoveRoleParamsInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionRemoveRoleResponseApi> {
const response = await instance.request({
url: `auth/permission/role/${params.role}`,
method: "delete",
...requestConfig,
});
return response.data;
}



/**
 * Add permissions to a role. Requires that both permissions and role exist.
 * The implementation checks if a permission is already added to the role, so
 * providing existing permissions is not a problem
 *  
 * Errors:
 * - `authPermission.requireRole.unknownRole` -> the provided `role` identifier is
 * unknown.
 * - `authPermission.roleAddPermissions.unknownPermission` -> Empty permission
 * array, duplicate permission in the array or an unknown permission provided.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionRoleAddPermissions(
instance: AxiosInstance,
params: T.AuthPermissionRoleAddPermissionsParamsInput,
body: T.AuthPermissionRoleAddPermissionsBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionRoleAddPermissionsResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/permission/role/${params.role}/add-permissions`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Get the roles with permissions across the system.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionRoleList(
instance: AxiosInstance,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionRoleListResponseApi> {
const response = await instance.request({
url: `auth/permission/role/list`,
method: "get",
...requestConfig,
});
return response.data;
}



/**
 * Remove permissions from a role. Requires that the role exists and all provided
 * permissions are assigned.
 *  
 * Errors:
 * - `authPermission.requireRole.unknownRole` -> the provided `role` identifier is
 * unknown.
 * - `authPermission.roleRemovePermissions.permissionNotAssigned` -> The provided
 * permission is not assigned to the provided role.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionRoleRemovePermissions(
instance: AxiosInstance,
params: T.AuthPermissionRoleRemovePermissionsParamsInput,
body: T.AuthPermissionRoleRemovePermissionsBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionRoleRemovePermissionsResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/permission/role/${params.role}/remove-permissions`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Get the roles and permissions for the current logged-in user.
*
*/
export async function apiAuthPermissionSummary(
instance: AxiosInstance,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionSummaryResponseApi> {
const response = await instance.request({
url: `auth/permission/summary`,
method: "get",
...requestConfig,
});
return response.data;
}



/**
 * Assign the provided role to the provided user.
 *  
 * Errors:
 * - Inherits `authRequireUser` errors with the `authPermission.requireUser`
 * eventKey.
 * - `authPermission.userAssignRole.userHasRole` -> user already has the provided
 * role assigned to them
 * - `authPermission.userAssignRole.unknownRole` -> Role can not be found by the
 * provided identifier.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionUserAssignRole(
instance: AxiosInstance,
params: T.AuthPermissionUserAssignRoleParamsInput,
body: T.AuthPermissionUserAssignRoleBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionUserAssignRoleResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/permission/user/${params.user}/assign-role`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Remove the provided role from the provided user.
 *  
 * Errors:
 * - Inherits `authRequireUser` errors with the `authPermission.requireUser`
 * eventKey.
 * - `authPermission.userRemoveRole.roleNotAssigned` -> role is not assigned to the
 * user at the time of calling.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionUserRemoveRole(
instance: AxiosInstance,
params: T.AuthPermissionUserRemoveRoleParamsInput,
body: T.AuthPermissionUserRemoveRoleBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionUserRemoveRoleResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/permission/user/${params.user}/remove-role`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Get the `apiAuthPermissionSummary` for the provided user.
 *  
 * Tags: auth:permission:manage
*
*/
export async function apiAuthPermissionUserSummary(
instance: AxiosInstance,
params: T.AuthPermissionUserSummaryParamsInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthPermissionUserSummaryResponseApi> {
const response = await instance.request({
url: `auth/permission/user/${params.user}/summary`,
method: "get",
...requestConfig,
});
return response.data;
}
