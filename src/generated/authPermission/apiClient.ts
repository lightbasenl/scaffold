// Generated by @compas/code-gen

import type { AxiosInstance, AxiosRequestConfig } from "axios";

import type {
  AuthPermissionCreateRoleBody,
  AuthPermissionCreateRoleResponse,
  AuthPermissionPermissionListResponse,
  AuthPermissionRemoveRoleParams,
  AuthPermissionRemoveRoleResponse,
  AuthPermissionRoleAddPermissionsBody,
  AuthPermissionRoleAddPermissionsParams,
  AuthPermissionRoleAddPermissionsResponse,
  AuthPermissionRoleListResponse,
  AuthPermissionRoleRemovePermissionsBody,
  AuthPermissionRoleRemovePermissionsParams,
  AuthPermissionRoleRemovePermissionsResponse,
  AuthPermissionSummaryResponse,
  AuthPermissionUserAssignRoleBody,
  AuthPermissionUserAssignRoleParams,
  AuthPermissionUserAssignRoleResponse,
  AuthPermissionUserRemoveRoleBody,
  AuthPermissionUserRemoveRoleParams,
  AuthPermissionUserRemoveRoleResponse,
  AuthPermissionUserSummaryParams,
  AuthPermissionUserSummaryResponse,
} from "generated/common/types";

/**
 * Create a new role. This role is 'tenant' specific.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionCreateRole(
  axiosInstance: AxiosInstance,
  body: AuthPermissionCreateRoleBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionCreateRoleResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/role`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Get the current known backend permissions. Can be used in the Frontend to match
 * known permissions and disable selection of unknowns.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionPermissionList(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionPermissionListResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/permission/list`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Remove a role. Only tenant specific roles can be removed.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionRemoveRole(
  axiosInstance: AxiosInstance,
  params: AuthPermissionRemoveRoleParams,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionRemoveRoleResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/role/${params.role}`,
    method: "DELETE",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Add permissions to a role. Requires that both permissions and role exist.
 * The implementation checks if a permission is already added to the role, so
 * providing existing permissions is not a problem
 *
 * Errors:
 * - `authPermission.requireRole.unknownRole` -> the provided `role` identifier is
 *   unknown.
 * - `authPermission.roleAddPermissions.unknownPermission` -> Empty permission
 *   array, duplicate permission in the array or an unknown permission provided.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionRoleAddPermissions(
  axiosInstance: AxiosInstance,
  params: AuthPermissionRoleAddPermissionsParams,
  body: AuthPermissionRoleAddPermissionsBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionRoleAddPermissionsResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/role/${params.role}/add-permissions`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Get the roles with permissions across the system.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionRoleList(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionRoleListResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/role/list`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Remove permissions from a role. Requires that the role exists and all provided
 * permissions are assigned.
 *
 * Errors:
 * - `authPermission.requireRole.unknownRole` -> the provided `role` identifier is
 *   unknown.
 * - `authPermission.roleRemovePermissions.permissionNotAssigned` -> The provided
 *   permission is not assigned to the provided role.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionRoleRemovePermissions(
  axiosInstance: AxiosInstance,
  params: AuthPermissionRoleRemovePermissionsParams,
  body: AuthPermissionRoleRemovePermissionsBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionRoleRemovePermissionsResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/role/${params.role}/remove-permissions`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Get the roles and permissions for the current logged-in user.
 *
 * Tags: []
 *
 */
export async function apiAuthPermissionSummary(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionSummaryResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/summary`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Assign the provided role to the provided user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `authPermission.requireUser`
 *   eventKey.
 * - `authPermission.userAssignRole.userHasRole` -> user already has the provided
 *   role assigned to them
 * - `authPermission.userAssignRole.unknownRole` -> Role can not be found by the
 *   provided identifier.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionUserAssignRole(
  axiosInstance: AxiosInstance,
  params: AuthPermissionUserAssignRoleParams,
  body: AuthPermissionUserAssignRoleBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionUserAssignRoleResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/user/${params.user}/assign-role`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Remove the provided role from the provided user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `authPermission.requireUser`
 *   eventKey.
 * - `authPermission.userRemoveRole.roleNotAssigned` -> role is not assigned to the
 *   user at the time of calling.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionUserRemoveRole(
  axiosInstance: AxiosInstance,
  params: AuthPermissionUserRemoveRoleParams,
  body: AuthPermissionUserRemoveRoleBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionUserRemoveRoleResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/user/${params.user}/remove-role`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Get the `apiAuthPermissionSummary` for the provided user.
 *
 * Tags: ["auth:permission:manage"]
 *
 */
export async function apiAuthPermissionUserSummary(
  axiosInstance: AxiosInstance,
  params: AuthPermissionUserSummaryParams,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPermissionUserSummaryResponse> {
  const response = await axiosInstance.request({
    url: `auth/permission/user/${params.user}/summary`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}
