// Generated by @compas/code-gen

import type { AxiosInstance, AxiosRequestConfig } from "axios";

import type {
  AuthPasswordBasedForgotPasswordBody,
  AuthPasswordBasedForgotPasswordResponse,
  AuthPasswordBasedListEmailsResponse,
  AuthPasswordBasedLoginBody,
  AuthPasswordBasedResetPasswordBody,
  AuthPasswordBasedResetPasswordResponse,
  AuthPasswordBasedTokenPair,
  AuthPasswordBasedUpdateEmailBody,
  AuthPasswordBasedUpdateEmailResponse,
  AuthPasswordBasedUpdatePasswordBody,
  AuthPasswordBasedUpdatePasswordResponse,
  AuthPasswordBasedVerifyEmailBody,
  AuthPasswordBasedVerifyOtpBody,
  AuthPasswordBasedVerifyOtpResponse,
} from "generated/common/types";

/**
 * Generate a reset token for the provided email. Can be called many times. The
 * tokens expire in 24 hours.
 *
 * Errors:
 * - `authPasswordBased.forgotPassword.unknownEmail` -> email is unknown in the
 *   platform
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedForgotPassword(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedForgotPasswordBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedForgotPasswordResponse> {
  const response = await axiosInstance.request({
    url: `auth/password-based/forgot-password`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedListEmails(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedListEmailsResponse> {
  const response = await axiosInstance.request({
    url: `auth/password-based/`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Do a password based login, requires a verified email.
 *
 * Errors:
 * - `authPasswordBased.login.unknownEmail` -> can't find a user with the provider
 *   email
 * - `authPasswordBased.login.emailNotVerified` -> the password login is not
 *   verified
 * - `authPasswordBased.login.maxAttemptsExceeded` -> more then 10 login attempts done in a rolling 5 minute interval
 * - `authPasswordBased.login.invalidEmailPasswordCombination` -> combination of
 *   email and password is invalid
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedLogin(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedLoginBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedTokenPair> {
  const response = await axiosInstance.request({
    url: `auth/password-based/login`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Set a new password based on the `resetToken` created via
 * `apiAuthPasswordForgotPassword`. Tokens are removed on usage so this route can't
 * be called multiple times.
 *
 * Errors:
 * - `authPasswordBased.resetPassword.invalidResetToken` -> unknown token or
 *   expired. Let the user request a new token via `forgotPassword`
 * - `authPasswordBased.resetPassword.useVerifyEmail` -> token is a verify token,
 *   use `verifyEmail`
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedResetPassword(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedResetPasswordBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedResetPasswordResponse> {
  const response = await axiosInstance.request({
    url: `auth/password-based/reset-password`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Let a logged-in user change its email to a different one. Destroys all active
 * sessions afterwards. The user email should be verified again.
 *
 * Errors:
 * - `authPasswordBased.updateEmail.userWithoutPasswordLogin` -> user doesn't have
 *   a password based login, so can't use this functionality
 * - `authPasswordBased.updateEmail.emailAlreadyUsed` -> email is already in use by
 *   another user
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedUpdateEmail(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedUpdateEmailBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedUpdateEmailResponse> {
  const response = await axiosInstance.request({
    url: `auth/password-based/update-email`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Set a new password fort the logged-in user. Destroys all active sessions
 * afterwards.
 *
 * Errors:
 * - `authPasswordBased.updateEmail.userWithoutPasswordLogin` -> user doesn't have
 *   a password based login, so can't use this functionality
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedUpdatePassword(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedUpdatePasswordBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedUpdatePasswordResponse> {
  const response = await axiosInstance.request({
    url: `auth/password-based/update-password`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Verify an email based on the provided 'verifyToken'. The token is not removed
 * until expired (after 24 hours). Does not throw on multiple calls with the same
 * token. The first verification also updates the `verifiedAt` property on the
 * `passwordLogin` entity. This route returns a token pair for a new session, which can be used to directly log the user in.
 *
 * Errors:
 * - `authPasswordBased.verifyEmail.invalidVerifyToken` -> unknown token or token
 *   expired. Redirect user to do a ' forgotPassword' flow.
 * - `authPasswordBased.verifyEmail.useResetPassword` -> token is for
 *   `resetPassword` instead of `verifyEmail`
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedVerifyEmail(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedVerifyEmailBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedTokenPair> {
  const response = await axiosInstance.request({
    url: `auth/password-based/verify-email`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Call this when `ctx.session.type === "checkTwoStep"` and `ctx.session.twoStepType === "passwordBasedOtp"`. Advances the session to
 * `type: user` on successful verification.
 *
 * Tags: []
 *
 */
export async function apiAuthPasswordBasedVerifyOtp(
  axiosInstance: AxiosInstance,
  body: AuthPasswordBasedVerifyOtpBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthPasswordBasedVerifyOtpResponse> {
  const response = await axiosInstance.request({
    url: `auth/password-based/verify-otp`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}
