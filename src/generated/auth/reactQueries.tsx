// Generated by @compas/code-gen

import type {
  QueryClient,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
} from "@tanstack/react-query";
import type { AxiosInstance, AxiosRequestConfig } from "axios";

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

import type { AppErrorResponse } from "generated/common/api-client";
import { useApi } from "generated/common/api-client-wrapper";
import type {
  AuthGetUserParams,
  AuthGetUserResponse,
  AuthLogoutResponse,
  AuthMeResponse,
  AuthRefreshTokensBody,
  AuthSetUserActiveBody,
  AuthSetUserActiveParams,
  AuthSetUserActiveResponse,
  AuthTokenPair,
  AuthUpdateUserBody,
  AuthUpdateUserParams,
  AuthUpdateUserResponse,
  AuthUserListBody,
  AuthUserListResponse,
} from "generated/common/types";

import {
  apiAuthGetUser,
  apiAuthLogout,
  apiAuthMe,
  apiAuthRefreshTokens,
  apiAuthSetUserActive,
  apiAuthUpdateUser,
  apiAuthUserList,
} from "./apiClient";
/**
 * Returns a single user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.getUser` eventKey.
 *
 * Tags: ["auth:user:list"]
 *
 */
export function useAuthGetUser<TData = AuthGetUserResponse>(
  opts: AuthGetUserParams & { requestConfig?: AxiosRequestConfig } & {
    queryOptions?: UseQueryOptions<AuthGetUserResponse, AppErrorResponse, TData>;
  },
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  options.enabled =
    options.enabled === true || (options.enabled !== false && opts.user !== undefined && opts.user !== null);
  return useQuery(
    useAuthGetUser.queryKey(opts),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthGetUser(axiosInstance, { user: opts["user"] }, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useAuthGetUser.queryKey()
 */
useAuthGetUser.baseKey = (): QueryKey => ["auth", "getUser"];

/**
 * Query key used by useAuthGetUser
 */
useAuthGetUser.queryKey = (opts: AuthGetUserParams): QueryKey => [
  ...useAuthGetUser.baseKey(),
  { user: opts["user"] },
];

/**
 * Fetch useAuthGetUser via the queryClient and return the result
 */
useAuthGetUser.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: AuthGetUserParams & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.fetchQuery(useAuthGetUser.queryKey(opts), () =>
    apiAuthGetUser(axiosInstance, { user: opts["user"] }, opts?.requestConfig),
  );
};

/**
 * Prefetch useAuthGetUser via the queryClient
 */
useAuthGetUser.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: AuthGetUserParams & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.prefetchQuery(useAuthGetUser.queryKey(opts), () =>
    apiAuthGetUser(axiosInstance, { user: opts["user"] }, opts?.requestConfig),
  );
};

/**
 * Invalidate useAuthGetUser via the queryClient
 */
useAuthGetUser.invalidate = (queryClient: QueryClient, opts: AuthGetUserParams) =>
  queryClient.invalidateQueries(useAuthGetUser.queryKey(opts));

/**
 * Set query data for useAuthGetUser via the queryClient
 */
useAuthGetUser.setQueryData = (
  queryClient: QueryClient,
  opts: AuthGetUserParams,
  data: AuthGetUserResponse,
) => queryClient.setQueryData(useAuthGetUser.queryKey(opts), data);

/**
 * Destroy the current session.
 *
 */
type UseAuthLogoutProps = { requestConfig?: AxiosRequestConfig };
export function useAuthLogout(
  options: UseMutationOptions<AuthLogoutResponse, AppErrorResponse, UseAuthLogoutProps> = {},
): UseMutationResult<AuthLogoutResponse, AppErrorResponse, UseAuthLogoutProps, unknown> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(variables => apiAuthLogout(axiosInstance, variables?.requestConfig), options);
}

/**
 * Get information about the current logged-in user. Throws a 401 if the user is
 * not logged in. Returns both session and user information. When the user needs to
 * do two-step verification (via 'session.type === checkTwoStep'), the user object is not returned yet.
 *
 */
export function useAuthMe<TData = AuthMeResponse>(
  opts: { requestConfig?: AxiosRequestConfig } & {
    queryOptions?: UseQueryOptions<AuthMeResponse, AppErrorResponse, TData>;
  } = {},
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useAuthMe.queryKey(),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthMe(axiosInstance, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useAuthMe.queryKey()
 */
useAuthMe.baseKey = (): QueryKey => ["auth", "me"];

/**
 * Query key used by useAuthMe
 */
useAuthMe.queryKey = (): QueryKey => [...useAuthMe.baseKey()];

/**
 * Fetch useAuthMe via the queryClient and return the result
 */
useAuthMe.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.fetchQuery(useAuthMe.queryKey(), () => apiAuthMe(axiosInstance, opts?.requestConfig));
};

/**
 * Prefetch useAuthMe via the queryClient
 */
useAuthMe.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.prefetchQuery(useAuthMe.queryKey(), () => apiAuthMe(axiosInstance, opts?.requestConfig));
};

/**
 * Invalidate useAuthMe via the queryClient
 */
useAuthMe.invalidate = (queryClient: QueryClient) => queryClient.invalidateQueries(useAuthMe.queryKey());

/**
 * Set query data for useAuthMe via the queryClient
 */
useAuthMe.setQueryData = (
  queryClient: QueryClient,

  data: AuthMeResponse,
) => queryClient.setQueryData(useAuthMe.queryKey(), data);

/**
 * Returns a new token pair based on the provided refresh token.
 *
 * Errors:
 * - Inherits errors from [`sessionStoreRefreshTokens`](https://compasjs.com/features/session-handling.html#sessionstorerefreshtokens)
 *
 */
type UseAuthRefreshTokensProps = AuthRefreshTokensBody & { requestConfig?: AxiosRequestConfig };
export function useAuthRefreshTokens(
  options: UseMutationOptions<AuthTokenPair, AppErrorResponse, UseAuthRefreshTokensProps> = {},
): UseMutationResult<AuthTokenPair, AppErrorResponse, UseAuthRefreshTokensProps, unknown> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthRefreshTokens(
        axiosInstance,
        { refreshToken: variables["refreshToken"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Soft delete or reactivate a user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.setUserActive.requireUser`
 *   eventKey.
 *
 * Tags: ["auth:user:manage"]
 *
 */
type UseAuthSetUserActiveProps = AuthSetUserActiveParams &
  AuthSetUserActiveBody & { requestConfig?: AxiosRequestConfig };
export function useAuthSetUserActive(
  options: UseMutationOptions<AuthSetUserActiveResponse, AppErrorResponse, UseAuthSetUserActiveProps> = {},
): UseMutationResult<AuthSetUserActiveResponse, AppErrorResponse, UseAuthSetUserActiveProps, unknown> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthSetUserActive(
        axiosInstance,
        { user: variables["user"] },
        { active: variables["active"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Update base user properties.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.updateUser.requireUser` eventKey.
 *
 * Tags: ["auth:user:manage"]
 *
 */
type UseAuthUpdateUserProps = AuthUpdateUserParams &
  AuthUpdateUserBody & { requestConfig?: AxiosRequestConfig };
export function useAuthUpdateUser(
  options: UseMutationOptions<AuthUpdateUserResponse, AppErrorResponse, UseAuthUpdateUserProps> = {},
): UseMutationResult<AuthUpdateUserResponse, AppErrorResponse, UseAuthUpdateUserProps, unknown> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  return useMutation(
    variables =>
      apiAuthUpdateUser(
        axiosInstance,
        { user: variables["user"] },
        { name: variables["name"] },
        variables?.requestConfig,
      ),
    options,
  );
}

/**
 * Return a user list with all settings from this package. Note that the filters
 * are optional. If one of the filters is true, only the users with that type login
 * are returned. If a filter is set to 'false', only users without that login type
 * are returned. The filters are combinable.
 *
 * Tags: ["auth:user:list"]
 *
 */
export function useAuthUserList<TData = AuthUserListResponse>(
  opts: AuthUserListBody & { requestConfig?: AxiosRequestConfig } & {
    queryOptions?: UseQueryOptions<AuthUserListResponse, AppErrorResponse, TData>;
  },
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useAuthUserList.queryKey(opts),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiAuthUserList(
        axiosInstance,
        { search: opts["search"], filters: opts["filters"] },
        opts?.requestConfig,
      );
    },
    options,
  );
}
/**
 * Base key used by useAuthUserList.queryKey()
 */
useAuthUserList.baseKey = (): QueryKey => ["auth", "userList"];

/**
 * Query key used by useAuthUserList
 */
useAuthUserList.queryKey = (opts: AuthUserListBody): QueryKey => [
  ...useAuthUserList.baseKey(),
  { search: opts["search"] ?? null, filters: opts["filters"] ?? null },
];

/**
 * Fetch useAuthUserList via the queryClient and return the result
 */
useAuthUserList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: AuthUserListBody & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.fetchQuery(useAuthUserList.queryKey(opts), () =>
    apiAuthUserList(axiosInstance, { search: opts["search"], filters: opts["filters"] }, opts?.requestConfig),
  );
};

/**
 * Prefetch useAuthUserList via the queryClient
 */
useAuthUserList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: AuthUserListBody & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.prefetchQuery(useAuthUserList.queryKey(opts), () =>
    apiAuthUserList(axiosInstance, { search: opts["search"], filters: opts["filters"] }, opts?.requestConfig),
  );
};

/**
 * Invalidate useAuthUserList via the queryClient
 */
useAuthUserList.invalidate = (queryClient: QueryClient, opts: AuthUserListBody) =>
  queryClient.invalidateQueries(useAuthUserList.queryKey(opts));

/**
 * Set query data for useAuthUserList via the queryClient
 */
useAuthUserList.setQueryData = (
  queryClient: QueryClient,
  opts: AuthUserListBody,
  data: AuthUserListResponse,
) => queryClient.setQueryData(useAuthUserList.queryKey(opts), data);
