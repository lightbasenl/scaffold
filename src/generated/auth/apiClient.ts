// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import * as T from "../common/types";
import { AxiosInstance } from "axios";



/**
 * Returns a single user.
 *  
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.getUser` eventKey.
 *  
 * Tags: auth:user:list
*
*/
export async function apiAuthGetUser(
instance: AxiosInstance,
params: T.AuthGetUserParamsInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthGetUserResponseApi> {
const response = await instance.request({
url: `auth/user/${params.user}`,
method: "get",
...requestConfig,
});
return response.data;
}



/**
 * Destroy the current session.
*
*/
export async function apiAuthLogout(
instance: AxiosInstance,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthLogoutResponseApi> {
const response = await instance.request({
url: `auth/logout`,
method: "post",
...requestConfig,
});
return response.data;
}



/**
 * Get information about the current logged-in user. Throws a 401 if the user is
 * not logged in. Returns both session and user information. When the user needs to
 * do two-step verification (via 'session.type === checkTwoStep'), the user object is not returned yet.
*
*/
export async function apiAuthMe(
instance: AxiosInstance,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthMeResponseApi> {
const response = await instance.request({
url: `auth/me`,
method: "get",
...requestConfig,
});
return response.data;
}



/**
 * Returns a new token pair based on the provided refresh token.
 *  
 * Errors:
* - Inherits errors from [`sessionStoreRefreshTokens`](https://compasjs.com/features/session-handling.html#sessionstorerefreshtokens)
*
*/
export async function apiAuthRefreshTokens(
instance: AxiosInstance,
body: T.AuthRefreshTokensBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthTokenPairApi> {
const data = body;
const response = await instance.request({
url: `auth/refresh-tokens`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Soft delete or reactivate a user.
 *  
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.setUserActive.requireUser`
 * eventKey.
 *  
 * Tags: auth:user:manage
*
*/
export async function apiAuthSetUserActive(
instance: AxiosInstance,
params: T.AuthSetUserActiveParamsInput,
body: T.AuthSetUserActiveBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthSetUserActiveResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/user/${params.user}/set-active`,
method: "post",
data,
...requestConfig,
});
return response.data;
}



/**
 * Update base user properties.
 *  
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.updateUser.requireUser` eventKey.
 *  
 * Tags: auth:user:manage
*
*/
export async function apiAuthUpdateUser(
instance: AxiosInstance,
params: T.AuthUpdateUserParamsInput,
body: T.AuthUpdateUserBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthUpdateUserResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/user/${params.user}/update`,
method: "put",
data,
...requestConfig,
});
return response.data;
}



/**
 * Return a user list with all settings from this package. Note that the filters
 * are optional. If one of the filters is true, only the users with that type login
 * are returned. If a filter is set to 'false', only users without that login type
 * are returned. The filters are combinable.
 *  
 * Tags: auth:user:list
*
*/
export async function apiAuthUserList(
instance: AxiosInstance,
body: T.AuthUserListBodyInput,
requestConfig: { signal?: AbortSignal|undefined } = {},
): Promise<T.AuthUserListResponseApi> {
const data = body;
const response = await instance.request({
url: `auth/list-users`,
method: "post",
data,
...requestConfig,
});
return response.data;
}
