// Generated by @compas/code-gen
/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any, unused-imports/no-unused-imports, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface, @typescript-eslint/ban-types */

import type { QueryKey, UseQueryOptions, QueryClient } from "@tanstack/react-query";
import type { AxiosInstance } from "axios";

import {
  UseMutationOptions,
  UseMutationResult,
  UseQueryResult,
  useMutation,
  useQuery,
  useQueryClient,
} from "@tanstack/react-query";

import type { AppErrorResponse } from "generated/common/reactQuery";
import { useApi } from "generated/common/reactQuery";
import type * as T from "generated/common/types";

import { apiMultitenantCurrent } from "./apiClient";

/**
 * Get information about the current tenant.
 */
export function useMultitenantCurrent<TData = T.MultitenantCurrentResponseApi>(
  opts?:
    | {
        options?: UseQueryOptions<T.MultitenantCurrentResponseApi, AppErrorResponse, TData> | undefined;
      }
    | undefined,
) {
  const axiosInstance = useApi();
  const options = opts?.options ?? {};
  return useQuery(
    useMultitenantCurrent.queryKey(),
    ({ signal }) => {
      return apiMultitenantCurrent(axiosInstance, { signal });
    },
    options,
  );
}
/**
 * Base key used by useMultitenantCurrent.queryKey()
 */
useMultitenantCurrent.baseKey = (): QueryKey => ["multitenant", "current"];
/**
 * Query key used by useMultitenantCurrent
 */
useMultitenantCurrent.queryKey = (): QueryKey => [...useMultitenantCurrent.baseKey()];
/**
 * Fetch useMultitenantCurrent via the queryClient and return the result
 */
useMultitenantCurrent.fetch = (queryClient: QueryClient, axiosInstance: AxiosInstance) =>
  queryClient.fetchQuery(useMultitenantCurrent.queryKey(), () => apiMultitenantCurrent(axiosInstance));
/**
 * Prefetch useMultitenantCurrent via the queryClient
 */
useMultitenantCurrent.prefetch = (queryClient: QueryClient, axiosInstance: AxiosInstance) =>
  queryClient.prefetchQuery(useMultitenantCurrent.queryKey(), () => apiMultitenantCurrent(axiosInstance));
/**
 * Invalidate useMultitenantCurrent via the queryClient
 */
useMultitenantCurrent.invalidate = (queryClient: QueryClient, axiosInstance: AxiosInstance) =>
  queryClient.invalidateQueries(useMultitenantCurrent.queryKey());
/**
 * Set data for useMultitenantCurrent on the queryClient
 */
useMultitenantCurrent.setQueryData = (queryClient: QueryClient, data: T.MultitenantCurrentResponseApi) =>
  queryClient.setQueryData(useMultitenantCurrent.queryKey(), data);
