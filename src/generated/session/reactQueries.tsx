// Generated by @compas/code-gen

import type {
  QueryClient,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
} from "@tanstack/react-query";
import type { AxiosInstance, AxiosRequestConfig } from "axios";

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

import type { AppErrorResponse } from "generated/common/api-client";
import type { Pretty } from "generated/common/api-client-wrapper";
import { useApi } from "generated/common/api-client-wrapper";
import type {
  SessionListResponse,
  SessionLogoutBody,
  SessionLogoutResponse,
  SessionSetDeviceNotificationTokenBody,
  SessionSetDeviceNotificationTokenResponse,
} from "generated/common/types";

import { apiSessionList, apiSessionLogout, apiSessionSetDeviceNotificationToken } from "./apiClient";
/**
 * List all sessions for the currently logged-in user.
 *
 */
export function useSessionList<TData = SessionListResponse>(
  opts: Pretty<
    { requestConfig?: AxiosRequestConfig } & {
      queryOptions?: UseQueryOptions<SessionListResponse, AppErrorResponse, TData>;
    }
  > = {},
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useSessionList.queryKey(),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiSessionList(axiosInstance, opts?.requestConfig);
    },
    options,
  );
}
/**
 * Base key used by useSessionList.queryKey()
 */
useSessionList.baseKey = (): QueryKey => ["session", "list"];

/**
 * Query key used by useSessionList
 */
useSessionList.queryKey = (): QueryKey => [...useSessionList.baseKey()];

/**
 * Fetch useSessionList via the queryClient and return the result
 */
useSessionList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.fetchQuery(useSessionList.queryKey(), () => {
    return apiSessionList(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Prefetch useSessionList via the queryClient
 */
useSessionList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts?: Pretty<{ requestConfig?: AxiosRequestConfig }>,
) => {
  return queryClient.prefetchQuery(useSessionList.queryKey(), () => {
    return apiSessionList(axiosInstance, opts?.requestConfig);
  });
};

/**
 * Invalidate useSessionList via the queryClient
 */
useSessionList.invalidate = (queryClient: QueryClient) =>
  queryClient.invalidateQueries(useSessionList.queryKey());

/**
 * Set query data for useSessionList via the queryClient
 */
useSessionList.setQueryData = (
  queryClient: QueryClient,

  data: SessionListResponse,
) => {
  return queryClient.setQueryData(useSessionList.queryKey(), data);
};

/**
 * Remove a specific session.
 *
 */
type UseSessionLogoutProps = Pretty<SessionLogoutBody & { requestConfig?: AxiosRequestConfig }>;
export function useSessionLogout(
  options: UseMutationOptions<SessionLogoutResponse, AppErrorResponse, UseSessionLogoutProps> = {},
  hookOptions: { invalidateQueries?: boolean } = {},
): UseMutationResult<SessionLogoutResponse, AppErrorResponse, UseSessionLogoutProps, unknown> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  if (hookOptions.invalidateQueries) {
    const originalOnSuccess = options.onSuccess;
    options.onSuccess = async (data, variables, context) => {
      queryClient.invalidateQueries(["session"]);
      if (typeof originalOnSuccess === "function") {
        return await originalOnSuccess(data, variables, context);
      }
    };
  }
  return useMutation(
    variables =>
      apiSessionLogout(axiosInstance, { sessionId: variables["sessionId"] }, variables?.requestConfig),
    options,
  );
}

/**
 * Set the notification token for the current session.
 *
 */
type UseSessionSetDeviceNotificationTokenProps = Pretty<
  SessionSetDeviceNotificationTokenBody & { requestConfig?: AxiosRequestConfig }
>;
export function useSessionSetDeviceNotificationToken(
  options: UseMutationOptions<
    SessionSetDeviceNotificationTokenResponse,
    AppErrorResponse,
    UseSessionSetDeviceNotificationTokenProps
  > = {},
  hookOptions: { invalidateQueries?: boolean } = {},
): UseMutationResult<
  SessionSetDeviceNotificationTokenResponse,
  AppErrorResponse,
  UseSessionSetDeviceNotificationTokenProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  if (hookOptions.invalidateQueries) {
    const originalOnSuccess = options.onSuccess;
    options.onSuccess = async (data, variables, context) => {
      queryClient.invalidateQueries(["session"]);
      if (typeof originalOnSuccess === "function") {
        return await originalOnSuccess(data, variables, context);
      }
    };
  }
  return useMutation(
    variables =>
      apiSessionSetDeviceNotificationToken(
        axiosInstance,
        { notificationToken: variables["notificationToken"] },
        variables?.requestConfig,
      ),
    options,
  );
}
