// Generated by @compas/code-gen
/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any, unused-imports/no-unused-imports, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface */

import type { UseMutationOptions, UseMutationResult } from "@tanstack/react-query";
import {
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
  useMutation,
  useQuery,
  useQueryClient,
  QueryClient,
} from "@tanstack/react-query";
import { AxiosInstance } from "axios";
import type { AppErrorResponse } from "../common/reactQuery";
import { useApi } from "../common/reactQuery";
import type * as T from "../common/types";
import { apiAuthAnonymousBasedLogin } from "./apiClient";

interface UseAuthAnonymousBasedLoginProps {
  body: T.AuthAnonymousBasedLoginBodyInput;
}
/**
 * Let an anonymous based user login with the specified token.
 *
 * Errors:
 * - `authAnonymousBased.login.unknownToken` -> can't find a user with the provided
 * token
 * - `authAnonymousBased.login.tokenIsNotAllowedToLogin` -> token is not allowed to
 * log in.
 */
export function useAuthAnonymousBasedLogin(
  options: UseMutationOptions<
    T.AuthAnonymousBasedTokenPairApi,
    AppErrorResponse,
    UseAuthAnonymousBasedLoginProps
  > = {},
): UseMutationResult<
  T.AuthAnonymousBasedTokenPairApi,
  AppErrorResponse,
  UseAuthAnonymousBasedLoginProps,
  unknown
> {
  const axiosInstance = useApi();
  return useMutation(variables => apiAuthAnonymousBasedLogin(axiosInstance, variables.body), options);
}
