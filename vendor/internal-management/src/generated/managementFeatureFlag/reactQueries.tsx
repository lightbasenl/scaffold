// Generated by @compas/code-gen

import type {
  QueryClient,
  QueryKey,
  Updater,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
} from "@tanstack/react-query";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import type { AxiosInstance, AxiosRequestConfig } from "axios";
import type { AppErrorResponse } from "../common/api-client";
import type { Pretty } from "../common/api-client-wrapper";
import { useApi } from "../common/api-client-wrapper";
import type {
  ManagementFeatureFlagItemWrite,
  ManagementFeatureFlagListBody,
  ManagementFeatureFlagListQuery,
  ManagementFeatureFlagListResponse,
  ManagementFeatureFlagSingleParams,
  ManagementFeatureFlagSingleResponse,
  ManagementFeatureFlagUpdateParams,
  ManagementFeatureFlagUpdateResponse,
} from "../common/types";
import {
  apiManagementFeatureFlagList,
  apiManagementFeatureFlagSingle,
  apiManagementFeatureFlagUpdate,
} from "./apiClient";
/**
 * Generated list route for 'featureFlag'.
 *
 */
export function useManagementFeatureFlagList<TData = ManagementFeatureFlagListResponse>(
  opts: Pretty<
    ManagementFeatureFlagListQuery &
      ManagementFeatureFlagListBody & { requestConfig?: AxiosRequestConfig } & {
        queryOptions?: Omit<
          UseQueryOptions<ManagementFeatureFlagListResponse, AppErrorResponse, TData>,
          "queryFn" | "queryKey"
        >;
      }
  >,
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery({
    queryKey: useManagementFeatureFlagList.queryKey(opts),
    queryFn: ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiManagementFeatureFlagList(
        axiosInstance,
        { offset: opts["offset"], limit: opts["limit"] },
        { where: opts["where"], orderBy: opts["orderBy"], orderBySpec: opts["orderBySpec"] },
        opts?.requestConfig,
      );
    },
    ...options,
  });
}
/**
 * Base key used by useManagementFeatureFlagList.queryKey()
 */
useManagementFeatureFlagList.baseKey = (): QueryKey => ["managementFeatureFlag", "list"];

/**
 * Query key used by useManagementFeatureFlagList
 */
useManagementFeatureFlagList.queryKey = (
  opts: Pretty<ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody>,
): QueryKey => [
  ...useManagementFeatureFlagList.baseKey(),
  { offset: opts["offset"] ?? null, limit: opts["limit"] ?? null },
  {
    where: opts["where"] ?? null,
    orderBy: opts["orderBy"] ?? null,
    orderBySpec: opts["orderBySpec"] ?? null,
  },
];

/**
 * Fetch useManagementFeatureFlagList via the queryClient and return the result
 */
useManagementFeatureFlagList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: Pretty<
    ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody & { requestConfig?: AxiosRequestConfig }
  >,
) => {
  return queryClient.fetchQuery({
    queryKey: useManagementFeatureFlagList.queryKey(opts),
    queryFn: () => {
      return apiManagementFeatureFlagList(
        axiosInstance,
        { offset: opts["offset"], limit: opts["limit"] },
        { where: opts["where"], orderBy: opts["orderBy"], orderBySpec: opts["orderBySpec"] },
        opts?.requestConfig,
      );
    },
  });
};

/**
 * Prefetch useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: Pretty<
    ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody & { requestConfig?: AxiosRequestConfig }
  >,
) => {
  return queryClient.prefetchQuery({
    queryKey: useManagementFeatureFlagList.queryKey(opts),
    queryFn: () => {
      return apiManagementFeatureFlagList(
        axiosInstance,
        { offset: opts["offset"], limit: opts["limit"] },
        { where: opts["where"], orderBy: opts["orderBy"], orderBySpec: opts["orderBySpec"] },
        opts?.requestConfig,
      );
    },
  });
};

/**
 * Invalidate useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.invalidate = (
  queryClient: QueryClient,
  opts: Pretty<ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody>,
) => queryClient.invalidateQueries({ queryKey: useManagementFeatureFlagList.queryKey(opts) });

/**
 * Set query data for useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.setQueryData = (
  queryClient: QueryClient,
  opts: Pretty<ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody>,
  data: Updater<ManagementFeatureFlagListResponse, ManagementFeatureFlagListResponse>,
) => {
  return queryClient.setQueryData(useManagementFeatureFlagList.queryKey(opts), data);
};

/**
 * Generated single route for 'featureFlag'.
 *
 */
export function useManagementFeatureFlagSingle<TData = ManagementFeatureFlagSingleResponse>(
  opts: Pretty<
    Partial<
      ManagementFeatureFlagSingleParams & { requestConfig?: AxiosRequestConfig } & {
        queryOptions?: Omit<
          UseQueryOptions<ManagementFeatureFlagSingleResponse, AppErrorResponse, TData>,
          "queryFn" | "queryKey"
        >;
      }
    >
  >,
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  options.enabled =
    options.enabled === true ||
    (options.enabled !== false && opts["featureFlagId"] !== undefined && opts["featureFlagId"] !== null);
  return useQuery({
    queryKey: useManagementFeatureFlagSingle.queryKey(opts),
    queryFn: ({ signal }) => {
      if (opts["featureFlagId"] === undefined || opts["featureFlagId"] === null) {
        throw new Error(
          "Not all required variables where provided to 'useManagementFeatureFlagSingle'. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
        );
      }

      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiManagementFeatureFlagSingle(
        axiosInstance,
        { featureFlagId: opts["featureFlagId"] },
        opts?.requestConfig,
      );
    },
    ...options,
  });
}
/**
 * Base key used by useManagementFeatureFlagSingle.queryKey()
 */
useManagementFeatureFlagSingle.baseKey = (): QueryKey => ["managementFeatureFlag", "single"];

/**
 * Query key used by useManagementFeatureFlagSingle
 */
useManagementFeatureFlagSingle.queryKey = (
  opts: Pretty<Partial<ManagementFeatureFlagSingleParams>>,
): QueryKey => [...useManagementFeatureFlagSingle.baseKey(), { featureFlagId: opts["featureFlagId"] }];

/**
 * Fetch useManagementFeatureFlagSingle via the queryClient and return the result
 */
useManagementFeatureFlagSingle.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: Pretty<Partial<ManagementFeatureFlagSingleParams & { requestConfig?: AxiosRequestConfig }>>,
) => {
  return queryClient.fetchQuery({
    queryKey: useManagementFeatureFlagSingle.queryKey(opts),
    queryFn: () => {
      if (opts["featureFlagId"] === undefined || opts["featureFlagId"] === null) {
        throw new Error(
          "Not all required variables where provided to 'useManagementFeatureFlagSingle.fetchQuery'. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
        );
      }

      return apiManagementFeatureFlagSingle(
        axiosInstance,
        { featureFlagId: opts["featureFlagId"] },
        opts?.requestConfig,
      );
    },
  });
};

/**
 * Prefetch useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: Pretty<Partial<ManagementFeatureFlagSingleParams & { requestConfig?: AxiosRequestConfig }>>,
) => {
  return queryClient.prefetchQuery({
    queryKey: useManagementFeatureFlagSingle.queryKey(opts),
    queryFn: () => {
      if (opts["featureFlagId"] === undefined || opts["featureFlagId"] === null) {
        throw new Error(
          "Not all required variables where provided to 'useManagementFeatureFlagSingle.prefetchQuery'. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
        );
      }

      return apiManagementFeatureFlagSingle(
        axiosInstance,
        { featureFlagId: opts["featureFlagId"] },
        opts?.requestConfig,
      );
    },
  });
};

/**
 * Invalidate useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.invalidate = (
  queryClient: QueryClient,
  opts: Pretty<Partial<ManagementFeatureFlagSingleParams>>,
) => queryClient.invalidateQueries({ queryKey: useManagementFeatureFlagSingle.queryKey(opts) });

/**
 * Set query data for useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.setQueryData = (
  queryClient: QueryClient,
  opts: Pretty<Partial<ManagementFeatureFlagSingleParams>>,
  data: Updater<ManagementFeatureFlagSingleResponse, ManagementFeatureFlagSingleResponse>,
) => {
  if (opts["featureFlagId"] === undefined || opts["featureFlagId"] === null) {
    throw new Error(
      "Not all required variables where provided to 'useManagementFeatureFlagSingle.setQueryData'. This happens when you manually set 'queryOptions.enabled' or when you use 'refetch'. Both skip the generated 'queryOptions.enabled'. Make sure that all necessary arguments are set.",
    );
  }

  return queryClient.setQueryData(useManagementFeatureFlagSingle.queryKey(opts), data);
};

/**
 * Generated update route for 'featureFlag'.
 *
 */
type UseManagementFeatureFlagUpdateProps = Pretty<
  ManagementFeatureFlagUpdateParams & ManagementFeatureFlagItemWrite & { requestConfig?: AxiosRequestConfig }
>;
export function useManagementFeatureFlagUpdate<Context = unknown>(
  options: UseMutationOptions<
    ManagementFeatureFlagUpdateResponse,
    AppErrorResponse,
    UseManagementFeatureFlagUpdateProps,
    Context
  > = {},
  hookOptions: { invalidateQueries?: boolean } = {},
): UseMutationResult<
  ManagementFeatureFlagUpdateResponse,
  AppErrorResponse,
  UseManagementFeatureFlagUpdateProps,
  Context
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  if (hookOptions.invalidateQueries) {
    const originalOnSuccess = options.onSuccess;
    options.onSuccess = async (data, variables, context) => {
      queryClient.invalidateQueries({ queryKey: ["managementFeatureFlag", "list"] });
      queryClient.invalidateQueries({
        queryKey: ["managementFeatureFlag", "single", { featureFlagId: variables.featureFlagId }],
      });
      if (typeof originalOnSuccess === "function") {
        return await originalOnSuccess(data, variables, context);
      }
    };
  }
  return useMutation({
    mutationFn: variables =>
      apiManagementFeatureFlagUpdate(
        axiosInstance,
        { featureFlagId: variables["featureFlagId"] },
        {
          globalValue: variables["globalValue"],
          description: variables["description"],
          tenantValues: variables["tenantValues"],
        },
        variables?.requestConfig,
      ),
    ...options,
  });
}
