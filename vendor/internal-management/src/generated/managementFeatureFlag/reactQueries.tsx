// Generated by @compas/code-gen

import type {
  QueryClient,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
} from "@tanstack/react-query";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import type { AxiosInstance, AxiosRequestConfig } from "axios";
import type { AppErrorResponse } from "../common/api-client";
import { useApi } from "../common/api-client-wrapper";
import type {
  ManagementFeatureFlagItemWrite,
  ManagementFeatureFlagListBody,
  ManagementFeatureFlagListQuery,
  ManagementFeatureFlagListResponse,
  ManagementFeatureFlagSingleParams,
  ManagementFeatureFlagSingleResponse,
  ManagementFeatureFlagUpdateParams,
  ManagementFeatureFlagUpdateResponse,
} from "../common/types";
import {
  apiManagementFeatureFlagList,
  apiManagementFeatureFlagSingle,
  apiManagementFeatureFlagUpdate,
} from "./apiClient";
/**
 * Generated list route for 'featureFlag'.
 *
 */
export function useManagementFeatureFlagList<TData = ManagementFeatureFlagListResponse>(
  opts: ManagementFeatureFlagListQuery &
    ManagementFeatureFlagListBody & { requestConfig?: AxiosRequestConfig } & {
      queryOptions?: UseQueryOptions<ManagementFeatureFlagListResponse, AppErrorResponse, TData>;
    },
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  return useQuery(
    useManagementFeatureFlagList.queryKey(opts),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiManagementFeatureFlagList(
        axiosInstance,
        { offset: opts["offset"], limit: opts["limit"] },
        { where: opts["where"], orderBy: opts["orderBy"], orderBySpec: opts["orderBySpec"] },
        opts?.requestConfig,
      );
    },
    options,
  );
}
/**
 * Base key used by useManagementFeatureFlagList.queryKey()
 */
useManagementFeatureFlagList.baseKey = (): QueryKey => ["managementFeatureFlag", "list"];

/**
 * Query key used by useManagementFeatureFlagList
 */
useManagementFeatureFlagList.queryKey = (
  opts: ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody,
): QueryKey => [
  ...useManagementFeatureFlagList.baseKey(),
  { offset: opts["offset"] ?? null, limit: opts["limit"] ?? null },
  {
    where: opts["where"] ?? null,
    orderBy: opts["orderBy"] ?? null,
    orderBySpec: opts["orderBySpec"] ?? null,
  },
];

/**
 * Fetch useManagementFeatureFlagList via the queryClient and return the result
 */
useManagementFeatureFlagList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: ManagementFeatureFlagListQuery &
    ManagementFeatureFlagListBody & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.fetchQuery(useManagementFeatureFlagList.queryKey(opts), () =>
    apiManagementFeatureFlagList(
      axiosInstance,
      { offset: opts["offset"], limit: opts["limit"] },
      { where: opts["where"], orderBy: opts["orderBy"], orderBySpec: opts["orderBySpec"] },
      opts?.requestConfig,
    ),
  );
};

/**
 * Prefetch useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: ManagementFeatureFlagListQuery &
    ManagementFeatureFlagListBody & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.prefetchQuery(useManagementFeatureFlagList.queryKey(opts), () =>
    apiManagementFeatureFlagList(
      axiosInstance,
      { offset: opts["offset"], limit: opts["limit"] },
      { where: opts["where"], orderBy: opts["orderBy"], orderBySpec: opts["orderBySpec"] },
      opts?.requestConfig,
    ),
  );
};

/**
 * Invalidate useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.invalidate = (
  queryClient: QueryClient,
  opts: ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody,
) => queryClient.invalidateQueries(useManagementFeatureFlagList.queryKey(opts));

/**
 * Set query data for useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.setQueryData = (
  queryClient: QueryClient,
  opts: ManagementFeatureFlagListQuery & ManagementFeatureFlagListBody,
  data: ManagementFeatureFlagListResponse,
) => queryClient.setQueryData(useManagementFeatureFlagList.queryKey(opts), data);

/**
 * Generated single route for 'featureFlag'.
 *
 */
export function useManagementFeatureFlagSingle<TData = ManagementFeatureFlagSingleResponse>(
  opts: ManagementFeatureFlagSingleParams & { requestConfig?: AxiosRequestConfig } & {
    queryOptions?: UseQueryOptions<ManagementFeatureFlagSingleResponse, AppErrorResponse, TData>;
  },
) {
  const axiosInstance = useApi();
  const options = opts?.queryOptions ?? {};
  options.enabled =
    options.enabled === true ||
    (options.enabled !== false && opts.featureFlagId !== undefined && opts.featureFlagId !== null);
  return useQuery(
    useManagementFeatureFlagSingle.queryKey(opts),
    ({ signal }) => {
      opts.requestConfig ??= {};
      opts.requestConfig.signal = signal;

      return apiManagementFeatureFlagSingle(
        axiosInstance,
        { featureFlagId: opts["featureFlagId"] },
        opts?.requestConfig,
      );
    },
    options,
  );
}
/**
 * Base key used by useManagementFeatureFlagSingle.queryKey()
 */
useManagementFeatureFlagSingle.baseKey = (): QueryKey => ["managementFeatureFlag", "single"];

/**
 * Query key used by useManagementFeatureFlagSingle
 */
useManagementFeatureFlagSingle.queryKey = (opts: ManagementFeatureFlagSingleParams): QueryKey => [
  ...useManagementFeatureFlagSingle.baseKey(),
  { featureFlagId: opts["featureFlagId"] },
];

/**
 * Fetch useManagementFeatureFlagSingle via the queryClient and return the result
 */
useManagementFeatureFlagSingle.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: ManagementFeatureFlagSingleParams & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.fetchQuery(useManagementFeatureFlagSingle.queryKey(opts), () =>
    apiManagementFeatureFlagSingle(
      axiosInstance,
      { featureFlagId: opts["featureFlagId"] },
      opts?.requestConfig,
    ),
  );
};

/**
 * Prefetch useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  opts: ManagementFeatureFlagSingleParams & { requestConfig?: AxiosRequestConfig },
) => {
  return queryClient.prefetchQuery(useManagementFeatureFlagSingle.queryKey(opts), () =>
    apiManagementFeatureFlagSingle(
      axiosInstance,
      { featureFlagId: opts["featureFlagId"] },
      opts?.requestConfig,
    ),
  );
};

/**
 * Invalidate useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.invalidate = (
  queryClient: QueryClient,
  opts: ManagementFeatureFlagSingleParams,
) => queryClient.invalidateQueries(useManagementFeatureFlagSingle.queryKey(opts));

/**
 * Set query data for useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.setQueryData = (
  queryClient: QueryClient,
  opts: ManagementFeatureFlagSingleParams,
  data: ManagementFeatureFlagSingleResponse,
) => queryClient.setQueryData(useManagementFeatureFlagSingle.queryKey(opts), data);

/**
 * Generated update route for 'featureFlag'.
 *
 */
type UseManagementFeatureFlagUpdateProps = ManagementFeatureFlagUpdateParams &
  ManagementFeatureFlagItemWrite & { requestConfig?: AxiosRequestConfig };
export function useManagementFeatureFlagUpdate(
  options: UseMutationOptions<
    ManagementFeatureFlagUpdateResponse,
    AppErrorResponse,
    UseManagementFeatureFlagUpdateProps
  > = {},
  hookOptions: { invalidateQueries?: boolean } = {},
): UseMutationResult<
  ManagementFeatureFlagUpdateResponse,
  AppErrorResponse,
  UseManagementFeatureFlagUpdateProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  if (hookOptions.invalidateQueries) {
    const originalOnSuccess = options.onSuccess;
    options.onSuccess = async (data, variables, context) => {
      queryClient.invalidateQueries(["managementFeatureFlag", "list"]);
      queryClient.invalidateQueries([
        "managementFeatureFlag",
        "single",
        { featureFlagId: variables.featureFlagId },
      ]);
      if (typeof originalOnSuccess === "function") {
        return await originalOnSuccess(data, variables, context);
      }
    };
  }
  return useMutation(
    variables =>
      apiManagementFeatureFlagUpdate(
        axiosInstance,
        { featureFlagId: variables["featureFlagId"] },
        { globalValue: variables["globalValue"], description: variables["description"] },
        variables?.requestConfig,
      ),
    options,
  );
}
