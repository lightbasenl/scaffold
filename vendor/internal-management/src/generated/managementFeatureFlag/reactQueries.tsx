// Generated by @compas/code-gen
/* eslint-disable no-unused-vars, @typescript-eslint/no-explicit-any, unused-imports/no-unused-imports, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface */

import type {
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  QueryClient,
} from "@tanstack/react-query";
import { UseQueryResult, useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import type { AxiosInstance } from "axios";
import type { AppErrorResponse } from "../common/reactQuery";
import { useApi } from "../common/reactQuery";
import type * as T from "../common/types";
import {
  apiManagementFeatureFlagList,
  apiManagementFeatureFlagSingle,
  apiManagementFeatureFlagUpdate,
} from "./apiClient";

/**
 *
 */
export function useManagementFeatureFlagList<TData = T.ManagementFeatureFlagListResponseApi>(opts: {
  query: T.ManagementFeatureFlagListQueryInput;
  body: T.ManagementFeatureFlagListBodyInput;
  options?: UseQueryOptions<T.ManagementFeatureFlagListResponseApi, AppErrorResponse, TData> | undefined;
}) {
  const axiosInstance = useApi();
  const options = opts?.options ?? {};
  return useQuery(
    useManagementFeatureFlagList.queryKey(opts.query, opts.body),
    ({ signal }) => {
      return apiManagementFeatureFlagList(axiosInstance, opts.query, opts.body, { signal });
    },
    options,
  );
}
/**
 * Base key used by useManagementFeatureFlagList.queryKey()
 */
useManagementFeatureFlagList.baseKey = (): QueryKey => ["managementFeatureFlag", "list"];
/**
 * Query key used by useManagementFeatureFlagList
 */
useManagementFeatureFlagList.queryKey = (
  query: T.ManagementFeatureFlagListQueryInput,
  body: T.ManagementFeatureFlagListBodyInput,
): QueryKey => [...useManagementFeatureFlagList.baseKey(), query, body];
/**
 * Fetch useManagementFeatureFlagList via the queryClient and return the result
 */
useManagementFeatureFlagList.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  data: {
    query: T.ManagementFeatureFlagListQueryInput;
    body: T.ManagementFeatureFlagListBodyInput;
  },
) =>
  queryClient.fetchQuery(useManagementFeatureFlagList.queryKey(data.query, data.body), () =>
    apiManagementFeatureFlagList(axiosInstance, data.query, data.body),
  );
/**
 * Prefetch useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  data: {
    query: T.ManagementFeatureFlagListQueryInput;
    body: T.ManagementFeatureFlagListBodyInput;
  },
) =>
  queryClient.prefetchQuery(useManagementFeatureFlagList.queryKey(data.query, data.body), () =>
    apiManagementFeatureFlagList(axiosInstance, data.query, data.body),
  );
/**
 * Invalidate useManagementFeatureFlagList via the queryClient
 */
useManagementFeatureFlagList.invalidate = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  keyInput: {
    query: T.ManagementFeatureFlagListQueryInput;
    body: T.ManagementFeatureFlagListBodyInput;
  },
) => queryClient.invalidateQueries(useManagementFeatureFlagList.queryKey(keyInput.query, keyInput.body));
/**
 * Set data for useManagementFeatureFlagList on the queryClient
 */
useManagementFeatureFlagList.setQueryData = (
  queryClient: QueryClient,
  queryKey: {
    query: T.ManagementFeatureFlagListQueryInput;
    body: T.ManagementFeatureFlagListBodyInput;
  },
  data: T.ManagementFeatureFlagListResponseApi,
) => queryClient.setQueryData(useManagementFeatureFlagList.queryKey(queryKey.query, queryKey.body), data);

/**
 *
 */
export function useManagementFeatureFlagSingle<TData = T.ManagementFeatureFlagSingleResponseApi>(opts: {
  params: T.ManagementFeatureFlagSingleParamsInput;
  options?: UseQueryOptions<T.ManagementFeatureFlagSingleResponseApi, AppErrorResponse, TData> | undefined;
}) {
  const axiosInstance = useApi();
  const options = opts?.options ?? {};
  options.enabled = options.enabled === true || (options.enabled !== false && !!opts.params.featureFlagId);
  return useQuery(
    useManagementFeatureFlagSingle.queryKey(opts.params),
    ({ signal }) => {
      return apiManagementFeatureFlagSingle(axiosInstance, opts.params, { signal });
    },
    options,
  );
}
/**
 * Base key used by useManagementFeatureFlagSingle.queryKey()
 */
useManagementFeatureFlagSingle.baseKey = (): QueryKey => ["managementFeatureFlag", "single"];
/**
 * Query key used by useManagementFeatureFlagSingle
 */
useManagementFeatureFlagSingle.queryKey = (params: T.ManagementFeatureFlagSingleParamsInput): QueryKey => [
  ...useManagementFeatureFlagSingle.baseKey(),
  params,
];
/**
 * Fetch useManagementFeatureFlagSingle via the queryClient and return the result
 */
useManagementFeatureFlagSingle.fetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  data: {
    params: T.ManagementFeatureFlagSingleParamsInput;
  },
) =>
  queryClient.fetchQuery(useManagementFeatureFlagSingle.queryKey(data.params), () =>
    apiManagementFeatureFlagSingle(axiosInstance, data.params),
  );
/**
 * Prefetch useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.prefetch = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  data: {
    params: T.ManagementFeatureFlagSingleParamsInput;
  },
) =>
  queryClient.prefetchQuery(useManagementFeatureFlagSingle.queryKey(data.params), () =>
    apiManagementFeatureFlagSingle(axiosInstance, data.params),
  );
/**
 * Invalidate useManagementFeatureFlagSingle via the queryClient
 */
useManagementFeatureFlagSingle.invalidate = (
  queryClient: QueryClient,
  axiosInstance: AxiosInstance,
  keyInput: {
    params: T.ManagementFeatureFlagSingleParamsInput;
  },
) => queryClient.invalidateQueries(useManagementFeatureFlagSingle.queryKey(keyInput.params));
/**
 * Set data for useManagementFeatureFlagSingle on the queryClient
 */
useManagementFeatureFlagSingle.setQueryData = (
  queryClient: QueryClient,
  queryKey: {
    params: T.ManagementFeatureFlagSingleParamsInput;
  },
  data: T.ManagementFeatureFlagSingleResponseApi,
) => queryClient.setQueryData(useManagementFeatureFlagSingle.queryKey(queryKey.params), data);

interface UseManagementFeatureFlagUpdateProps {
  params: T.ManagementFeatureFlagUpdateParamsInput;
  body: T.ManagementFeatureFlagItemWriteInput;
}
/**
 *
 */
export function useManagementFeatureFlagUpdate(
  options: UseMutationOptions<
    T.ManagementFeatureFlagUpdateResponseApi,
    AppErrorResponse,
    UseManagementFeatureFlagUpdateProps
  > = {},
  hookOptions: { invalidateQueries?: boolean } = {},
): UseMutationResult<
  T.ManagementFeatureFlagUpdateResponseApi,
  AppErrorResponse,
  UseManagementFeatureFlagUpdateProps,
  unknown
> {
  const axiosInstance = useApi();
  const queryClient = useQueryClient();
  if (hookOptions?.invalidateQueries) {
    const originalOnSuccess = options.onSuccess;
    options.onSuccess = async (data, variables, context) => {
      queryClient.invalidateQueries(["managementFeatureFlag", "list"]);
      queryClient.invalidateQueries([
        "managementFeatureFlag",
        "single",
        { featureFlagId: variables.params.featureFlagId },
      ]);
      if (typeof originalOnSuccess === "function") {
        return await originalOnSuccess(data, variables, context);
      }
    };
  }
  return useMutation(
    variables => apiManagementFeatureFlagUpdate(axiosInstance, variables.params, variables.body),
    options,
  );
}
