// Generated by @compas/code-gen

import type { AxiosInstance, AxiosRequestConfig } from "axios";
import type {
  AuthGetUserParams,
  AuthGetUserResponse,
  AuthImpersonateStopSessionResponse,
  AuthLogoutResponse,
  AuthMeResponse,
  AuthRefreshTokensBody,
  AuthSetUserActiveBody,
  AuthSetUserActiveParams,
  AuthSetUserActiveResponse,
  AuthTokenPair,
  AuthUpdateUserBody,
  AuthUpdateUserParams,
  AuthUpdateUserResponse,
  AuthUserListBody,
  AuthUserListResponse,
} from "../common/types";
/**
 * Returns a single user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.getUser` eventKey.
 *
 * Tags: ["auth:user:list"]
 *
 */
export async function apiAuthGetUser(
  axiosInstance: AxiosInstance,
  params: AuthGetUserParams,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthGetUserResponse> {
  const response = await axiosInstance.request({
    url: `auth/user/${params.user}`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Stop an impersonating session. Requires that the current session belongs to the impersonator. Impersonate sessions can only be started from the platform backends.
 *
 * Callers should bust all local caches and redirect the user to the correct location.
 *
 * Tags: []
 *
 */
export async function apiAuthImpersonateStopSession(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthImpersonateStopSessionResponse> {
  const response = await axiosInstance.request({
    url: `auth/impersonate-stop-session`,
    method: "POST",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Destroy the current session.
 *
 * Tags: []
 *
 */
export async function apiAuthLogout(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthLogoutResponse> {
  const response = await axiosInstance.request({
    url: `auth/logout`,
    method: "POST",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Get information about the current logged-in user. Throws a 401 if the user is
 * not logged in. Returns both session and user information. When the user needs to
 * do two-step verification (via 'session.type === checkTwoStep'), the user object is not returned yet.
 *
 * Tags: []
 *
 */
export async function apiAuthMe(
  axiosInstance: AxiosInstance,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthMeResponse> {
  const response = await axiosInstance.request({
    url: `auth/me`,
    method: "GET",
    ...requestConfig,
  });
  return response.data;
}

/**
 * Returns a new token pair based on the provided refresh token.
 *
 * Errors:
 * - Inherits errors from [`sessionStoreRefreshTokens`](https://compasjs.com/features/session-handling.html#sessionstorerefreshtokens)
 *
 * Tags: []
 *
 */
export async function apiAuthRefreshTokens(
  axiosInstance: AxiosInstance,
  body: AuthRefreshTokensBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthTokenPair> {
  const response = await axiosInstance.request({
    url: `auth/refresh-tokens`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Soft delete or reactivate a user.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.setUserActive.requireUser`
 *   eventKey.
 *
 * Tags: ["auth:user:manage"]
 *
 */
export async function apiAuthSetUserActive(
  axiosInstance: AxiosInstance,
  params: AuthSetUserActiveParams,
  body: AuthSetUserActiveBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthSetUserActiveResponse> {
  const response = await axiosInstance.request({
    url: `auth/user/${params.user}/set-active`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Update base user properties.
 *
 * Errors:
 * - Inherits `authRequireUser` errors with the `auth.updateUser.requireUser` eventKey.
 *
 * Tags: ["auth:user:manage"]
 *
 */
export async function apiAuthUpdateUser(
  axiosInstance: AxiosInstance,
  params: AuthUpdateUserParams,
  body: AuthUpdateUserBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthUpdateUserResponse> {
  const response = await axiosInstance.request({
    url: `auth/user/${params.user}/update`,
    method: "PUT",
    data: body,
    ...requestConfig,
  });
  return response.data;
}

/**
 * Return a user list with all settings from this package. Note that the filters
 * are optional. If one of the filters is true, only the users with that type login
 * are returned. If a filter is set to 'false', only users without that login type
 * are returned. The filters are combinable.
 *
 * Tags: ["auth:user:list"]
 *
 */
export async function apiAuthUserList(
  axiosInstance: AxiosInstance,
  body: AuthUserListBody,
  requestConfig?: AxiosRequestConfig,
): Promise<AuthUserListResponse> {
  const response = await axiosInstance.request({
    url: `auth/list-users`,
    method: "POST",
    data: body,
    ...requestConfig,
  });
  return response.data;
}
